
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006800  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d14  08006d14  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d1c  08006d1c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08006d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005134  20000208  08006f2c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000533c  08006f2c  0002533c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115bb  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b9e  00000000  00000000  000317f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a27  00000000  00000000  00035e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b888  00000000  00000000  0004c867  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e6f4  00000000  00000000  000580ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e67e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d6c  00000000  00000000  000e6860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006988 	.word	0x08006988

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08006988 	.word	0x08006988

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000224 	.word	0x20000224
 80005c0:	20000278 	.word	0x20000278

080005c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetTimerTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000478 	.word	0x20000478
 80005f4:	200004cc 	.word	0x200004cc

080005f8 <max>:
int curr_time = 0;

char screen[NROW + 1][NCOL + 1];
char input;

int max(int a, int b) {
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	return (a > b) ? a : b;
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4293      	cmp	r3, r2
 8000608:	bfb8      	it	lt
 800060a:	4613      	movlt	r3, r2
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <randint>:

int randint(int s, int e) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	return rand() % (e - s + 1) + s;
 8000622:	f005 fcc5 	bl	8005fb0 <rand>
 8000626:	4602      	mov	r2, r0
 8000628:	6839      	ldr	r1, [r7, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	1acb      	subs	r3, r1, r3
 800062e:	3301      	adds	r3, #1
 8000630:	fb92 f1f3 	sdiv	r1, r2, r3
 8000634:	fb03 f301 	mul.w	r3, r3, r1
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <swap>:

void swap(int* a, int* b) {
 8000646:	b480      	push	{r7}
 8000648:	b085      	sub	sp, #20
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
	int temp = *a;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
	*a = *b;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
	*b = temp;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <printscreen>:
void printline(char s[]) {
	HAL_UART_Transmit(&huart2, s, sizeof(s), 1000000);
	//HAL_UART_Transmit(&huart2, "\n", sizeof("\n"), 1000000);
}

void printscreen() {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
	//char s[NROW * NCOL + 2 * NROW + 1];
	HAL_UART_Transmit(&huart2, "\033[H\033[J", sizeof("\033[H\033[J"), 1000000);
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <printscreen+0x68>)
 8000678:	2207      	movs	r2, #7
 800067a:	4918      	ldr	r1, [pc, #96]	; (80006dc <printscreen+0x6c>)
 800067c:	4818      	ldr	r0, [pc, #96]	; (80006e0 <printscreen+0x70>)
 800067e:	f002 f842 	bl	8002706 <HAL_UART_Transmit>
	int k = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NROW; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	e01e      	b.n	80006ca <printscreen+0x5a>
		HAL_UART_Transmit(&huart2, &screen[i], NCOL, 1000000);
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	4613      	mov	r3, r2
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4413      	add	r3, r2
 8000694:	00da      	lsls	r2, r3, #3
 8000696:	4413      	add	r3, r2
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <printscreen+0x74>)
 800069a:	1899      	adds	r1, r3, r2
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <printscreen+0x68>)
 800069e:	2250      	movs	r2, #80	; 0x50
 80006a0:	480f      	ldr	r0, [pc, #60]	; (80006e0 <printscreen+0x70>)
 80006a2:	f002 f830 	bl	8002706 <HAL_UART_Transmit>
		for (int j = 0; j < NCOL; j++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	e002      	b.n	80006b2 <printscreen+0x42>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b4f      	cmp	r3, #79	; 0x4f
 80006b6:	ddf9      	ble.n	80006ac <printscreen+0x3c>
			//s[k++] = screen[i][j];
			//HAL_UART_Transmit(&huart2, &screen[i][j], sizeof(screen[i][j]), 1000000);
		}
		//s[k++] = '\r';
		//s[k++] = '\n';
		HAL_UART_Transmit(&huart2, "\r\n", sizeof("\r\n"), 1000000);
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <printscreen+0x68>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	490a      	ldr	r1, [pc, #40]	; (80006e8 <printscreen+0x78>)
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <printscreen+0x70>)
 80006c0:	f002 f821 	bl	8002706 <HAL_UART_Transmit>
	for (int i = 0; i < NROW; i++) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b16      	cmp	r3, #22
 80006ce:	dddd      	ble.n	800068c <printscreen+0x1c>
	}
	//s[k] = 0;
	//HAL_UART_Transmit(&huart2, s, sizeof(s), 1000000);
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	000f4240 	.word	0x000f4240
 80006dc:	08006a2c 	.word	0x08006a2c
 80006e0:	200050c0 	.word	0x200050c0
 80006e4:	20004920 	.word	0x20004920
 80006e8:	08006a34 	.word	0x08006a34

080006ec <resetscreen>:
	for (int i = 0; i < NROW; i++) {
		printline(screen[i]);
	}
}

void resetscreen() {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NROW; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	e022      	b.n	800073e <resetscreen+0x52>
		screen[i][NCOL] = 0;
 80006f8:	4915      	ldr	r1, [pc, #84]	; (8000750 <resetscreen+0x64>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4613      	mov	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4413      	add	r3, r2
 8000702:	00da      	lsls	r2, r3, #3
 8000704:	4413      	add	r3, r2
 8000706:	440b      	add	r3, r1
 8000708:	3350      	adds	r3, #80	; 0x50
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NCOL; j++) {
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	e00e      	b.n	8000732 <resetscreen+0x46>
			screen[i][j] = ' ';
 8000714:	490e      	ldr	r1, [pc, #56]	; (8000750 <resetscreen+0x64>)
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	4613      	mov	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	00da      	lsls	r2, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	18ca      	adds	r2, r1, r3
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	4413      	add	r3, r2
 8000728:	2220      	movs	r2, #32
 800072a:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NCOL; j++) {
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b4f      	cmp	r3, #79	; 0x4f
 8000736:	dded      	ble.n	8000714 <resetscreen+0x28>
	for (int i = 0; i < NROW; i++) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b16      	cmp	r3, #22
 8000742:	ddd9      	ble.n	80006f8 <resetscreen+0xc>
		}
	}
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	20004920 	.word	0x20004920

08000754 <fillstring>:

void fillstring(char *s, int r, int c) {
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	int len = strlen(s);
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff fd3d 	bl	80001e0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e014      	b.n	800079a <fillstring+0x46>
		screen[r][c + i] = s[i];
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	4413      	add	r3, r2
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	4411      	add	r1, r2
 800077c:	781c      	ldrb	r4, [r3, #0]
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <fillstring+0x58>)
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	4413      	add	r3, r2
 8000788:	00da      	lsls	r2, r3, #3
 800078a:	4413      	add	r3, r2
 800078c:	4403      	add	r3, r0
 800078e:	440b      	add	r3, r1
 8000790:	4622      	mov	r2, r4
 8000792:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3301      	adds	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	429a      	cmp	r2, r3
 80007a0:	dbe6      	blt.n	8000770 <fillstring+0x1c>
	}
}
 80007a2:	bf00      	nop
 80007a4:	371c      	adds	r7, #28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20004920 	.word	0x20004920

080007b0 <fillstringcenter>:

void fillstringcenter(char *s, int r, int isactive) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	int len = strlen(s);
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff fd0f 	bl	80001e0 <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	617b      	str	r3, [r7, #20]
	fillstring(s, r, (NCOL-len)/2);
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80007cc:	0fda      	lsrs	r2, r3, #31
 80007ce:	4413      	add	r3, r2
 80007d0:	105b      	asrs	r3, r3, #1
 80007d2:	461a      	mov	r2, r3
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f7ff ffbc 	bl	8000754 <fillstring>
	if (isactive) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d026      	beq.n	8000830 <fillstringcenter+0x80>
		screen[r][(NCOL-len)/2 - 2] = '>';
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80007e8:	0fda      	lsrs	r2, r3, #31
 80007ea:	4413      	add	r3, r2
 80007ec:	105b      	asrs	r3, r3, #1
 80007ee:	1e99      	subs	r1, r3, #2
 80007f0:	4811      	ldr	r0, [pc, #68]	; (8000838 <fillstringcenter+0x88>)
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	4613      	mov	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4413      	add	r3, r2
 80007fa:	00da      	lsls	r2, r3, #3
 80007fc:	4413      	add	r3, r2
 80007fe:	4403      	add	r3, r0
 8000800:	440b      	add	r3, r1
 8000802:	223e      	movs	r2, #62	; 0x3e
 8000804:	701a      	strb	r2, [r3, #0]
		screen[r][(NCOL-len)/2 + len + 1] = '<';
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 800080c:	0fda      	lsrs	r2, r3, #31
 800080e:	4413      	add	r3, r2
 8000810:	105b      	asrs	r3, r3, #1
 8000812:	461a      	mov	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4413      	add	r3, r2
 8000818:	1c59      	adds	r1, r3, #1
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <fillstringcenter+0x88>)
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	4613      	mov	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	4413      	add	r3, r2
 8000824:	00da      	lsls	r2, r3, #3
 8000826:	4413      	add	r3, r2
 8000828:	4403      	add	r3, r0
 800082a:	440b      	add	r3, r1
 800082c:	223c      	movs	r2, #60	; 0x3c
 800082e:	701a      	strb	r2, [r3, #0]
	}
}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20004920 	.word	0x20004920

0800083c <menu_up>:
 */

int menu_activei = 0;
int menu_maxi = 0;

void menu_up() {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	menu_activei--;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <menu_up+0x28>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3b01      	subs	r3, #1
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <menu_up+0x28>)
 8000848:	6013      	str	r3, [r2, #0]
	if (menu_activei < 0) menu_activei = 0;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <menu_up+0x28>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	da02      	bge.n	8000858 <menu_up+0x1c>
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <menu_up+0x28>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200008d4 	.word	0x200008d4

08000868 <menu_down>:

void menu_down() {
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	menu_activei++;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <menu_down+0x2c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <menu_down+0x2c>)
 8000874:	6013      	str	r3, [r2, #0]
	if (menu_activei > menu_maxi) {
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <menu_down+0x2c>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <menu_down+0x30>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	dd03      	ble.n	800088a <menu_down+0x22>
		menu_activei = menu_maxi;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <menu_down+0x30>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a03      	ldr	r2, [pc, #12]	; (8000894 <menu_down+0x2c>)
 8000888:	6013      	str	r3, [r2, #0]
	}
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	200008d4 	.word	0x200008d4
 8000898:	200008d8 	.word	0x200008d8

0800089c <fillmenu>:

void fillmenu(char** menudata, int menulen, int activei) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	int LOGO_ROW = 8;
 80008a8:	2308      	movs	r3, #8
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
	int START_ROW = 12;
 80008ac:	230c      	movs	r3, #12
 80008ae:	623b      	str	r3, [r7, #32]

	if (menulen > 2) {
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dd05      	ble.n	80008c2 <fillmenu+0x26>
		LOGO_ROW -= 2;
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	3b02      	subs	r3, #2
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
		START_ROW -= 2;
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	3b02      	subs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
	}

	char* TITLE;
	if (curr_time % 2 == 0) {
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <fillmenu+0x98>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <fillmenu+0x38>
		TITLE = "SWAPSORT";
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <fillmenu+0x9c>)
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	e001      	b.n	80008d8 <fillmenu+0x3c>
	} else {
		TITLE = "SORTSWAP";
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <fillmenu+0xa0>)
 80008d6:	61fb      	str	r3, [r7, #28]
	}

	fillstringcenter(TITLE, LOGO_ROW, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008dc:	69f8      	ldr	r0, [r7, #28]
 80008de:	f7ff ff67 	bl	80007b0 <fillstringcenter>

	for(int i = 0;i<menulen;i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	e017      	b.n	8000918 <fillmenu+0x7c>
		int ROW = START_ROW + i*2;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	6a3a      	ldr	r2, [r7, #32]
 80008ee:	4413      	add	r3, r2
 80008f0:	617b      	str	r3, [r7, #20]

		fillstringcenter(menudata[i], ROW, i == activei);
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4413      	add	r3, r2
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	bf0c      	ite	eq
 8000904:	2301      	moveq	r3, #1
 8000906:	2300      	movne	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	6979      	ldr	r1, [r7, #20]
 800090e:	f7ff ff4f 	bl	80007b0 <fillstringcenter>
	for(int i = 0;i<menulen;i++) {
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	3301      	adds	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbe3      	blt.n	80008e8 <fillmenu+0x4c>
	}

	fillstringcenter("Press W to Up, S to Down, ENTER to Choose", NROW-1, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2116      	movs	r1, #22
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <fillmenu+0xa4>)
 8000926:	f7ff ff43 	bl	80007b0 <fillstringcenter>
}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200008cc 	.word	0x200008cc
 8000938:	08006a38 	.word	0x08006a38
 800093c:	08006a44 	.word	0x08006a44
 8000940:	08006a50 	.word	0x08006a50

08000944 <makestick>:
int play_start_time = 0;
char play_time_text[100];

int is_playing = 0;

void makestick(int x, int height, char c) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4613      	mov	r3, r2
 8000950:	71fb      	strb	r3, [r7, #7]
	for (int i = NROW - 1; i >= max(NROW - height, 0); i--) {
 8000952:	2316      	movs	r3, #22
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	e00e      	b.n	8000976 <makestick+0x32>
		screen[i][x] = c;
 8000958:	490e      	ldr	r1, [pc, #56]	; (8000994 <makestick+0x50>)
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4613      	mov	r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	4413      	add	r3, r2
 8000962:	00da      	lsls	r2, r3, #3
 8000964:	4413      	add	r3, r2
 8000966:	18ca      	adds	r2, r1, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	79fa      	ldrb	r2, [r7, #7]
 800096e:	701a      	strb	r2, [r3, #0]
	for (int i = NROW - 1; i >= max(NROW - height, 0); i--) {
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3b01      	subs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	f1c3 0317 	rsb	r3, r3, #23
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe3a 	bl	80005f8 <max>
 8000984:	4602      	mov	r2, r0
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4293      	cmp	r3, r2
 800098a:	dae5      	bge.n	8000958 <makestick+0x14>
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20004920 	.word	0x20004920

08000998 <initstick>:

void initstick(int len) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	number_len = len;
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <initstick+0x64>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < number_len; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e00b      	b.n	80009c4 <initstick+0x2c>
		numbers[i] = randint(1, NROW - 4);
 80009ac:	2113      	movs	r1, #19
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fe32 	bl	8000618 <randint>
 80009b4:	4601      	mov	r1, r0
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <initstick+0x68>)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < number_len; i++) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <initstick+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbee      	blt.n	80009ac <initstick+0x14>
	}
	number_active_i = 0;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <initstick+0x6c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
	number_swap_mode = 0;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <initstick+0x70>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
	play_start_time = curr_time;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <initstick+0x74>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <initstick+0x78>)
 80009e0:	6013      	str	r3, [r2, #0]
	scan_count = 0;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <initstick+0x7c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
	swap_count = 0;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <initstick+0x80>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
	is_playing = 1;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <initstick+0x84>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200008dc 	.word	0x200008dc
 8000a00:	20005100 	.word	0x20005100
 8000a04:	200008e0 	.word	0x200008e0
 8000a08:	200008e4 	.word	0x200008e4
 8000a0c:	200008cc 	.word	0x200008cc
 8000a10:	200008f0 	.word	0x200008f0
 8000a14:	200008e8 	.word	0x200008e8
 8000a18:	200008ec 	.word	0x200008ec
 8000a1c:	200008f4 	.word	0x200008f4

08000a20 <drawstick>:

void drawstick() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
	int stickwidth = NCOL / number_len;
 8000a26:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <drawstick+0x104>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2250      	movs	r2, #80	; 0x50
 8000a2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a30:	60fb      	str	r3, [r7, #12]
	int stickmargin = (NCOL % number_len) / 2;
 8000a32:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <drawstick+0x104>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2250      	movs	r2, #80	; 0x50
 8000a38:	fb92 f1f3 	sdiv	r1, r2, r3
 8000a3c:	fb03 f301 	mul.w	r3, r3, r1
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	0fda      	lsrs	r2, r3, #31
 8000a44:	4413      	add	r3, r2
 8000a46:	105b      	asrs	r3, r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
	for (int i = stickmargin, j = 0; j < number_len; i += stickwidth, j++) {
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	e01c      	b.n	8000a8e <drawstick+0x6e>
		makestick(i, numbers[j], (number_active_i == j) ? (number_swap_mode ? '#' : 'X') : '|');
 8000a54:	4a34      	ldr	r2, [pc, #208]	; (8000b28 <drawstick+0x108>)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <drawstick+0x10c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d107      	bne.n	8000a76 <drawstick+0x56>
 8000a66:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <drawstick+0x110>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <drawstick+0x52>
 8000a6e:	2323      	movs	r3, #35	; 0x23
 8000a70:	e002      	b.n	8000a78 <drawstick+0x58>
 8000a72:	2358      	movs	r3, #88	; 0x58
 8000a74:	e000      	b.n	8000a78 <drawstick+0x58>
 8000a76:	237c      	movs	r3, #124	; 0x7c
 8000a78:	461a      	mov	r2, r3
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff62 	bl	8000944 <makestick>
	for (int i = stickmargin, j = 0; j < number_len; i += stickwidth, j++) {
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4413      	add	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <drawstick+0x104>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbdd      	blt.n	8000a54 <drawstick+0x34>
	}

	sprintf(swap_score_text, "SWAP %d", swap_count);
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <drawstick+0x114>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4926      	ldr	r1, [pc, #152]	; (8000b38 <drawstick+0x118>)
 8000aa0:	4826      	ldr	r0, [pc, #152]	; (8000b3c <drawstick+0x11c>)
 8000aa2:	f005 fab9 	bl	8006018 <siprintf>
	sprintf(scan_score_text, "SCAN %d", scan_count);
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <drawstick+0x120>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4925      	ldr	r1, [pc, #148]	; (8000b44 <drawstick+0x124>)
 8000aae:	4826      	ldr	r0, [pc, #152]	; (8000b48 <drawstick+0x128>)
 8000ab0:	f005 fab2 	bl	8006018 <siprintf>

	fillstring(swap_score_text, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4820      	ldr	r0, [pc, #128]	; (8000b3c <drawstick+0x11c>)
 8000aba:	f7ff fe4b 	bl	8000754 <fillstring>
	fillstring(scan_score_text, 1, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4821      	ldr	r0, [pc, #132]	; (8000b48 <drawstick+0x128>)
 8000ac4:	f7ff fe46 	bl	8000754 <fillstring>

	// Play time
	int play_min = (curr_time - play_start_time) / 60;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <drawstick+0x12c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <drawstick+0x130>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <drawstick+0x134>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	441a      	add	r2, r3
 8000ada:	1152      	asrs	r2, r2, #5
 8000adc:	17db      	asrs	r3, r3, #31
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	607b      	str	r3, [r7, #4]
	int play_second = (curr_time - play_start_time) % 60;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <drawstick+0x12c>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <drawstick+0x130>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <drawstick+0x134>)
 8000aee:	fb83 1302 	smull	r1, r3, r3, r2
 8000af2:	4413      	add	r3, r2
 8000af4:	1159      	asrs	r1, r3, #5
 8000af6:	17d3      	asrs	r3, r2, #31
 8000af8:	1ac9      	subs	r1, r1, r3
 8000afa:	460b      	mov	r3, r1
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	1a5b      	subs	r3, r3, r1
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	603b      	str	r3, [r7, #0]

	sprintf(play_time_text, "%02d:%02d", play_min, play_second);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4913      	ldr	r1, [pc, #76]	; (8000b58 <drawstick+0x138>)
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <drawstick+0x13c>)
 8000b0e:	f005 fa83 	bl	8006018 <siprintf>

	fillstring(play_time_text, 0, NCOL-5);
 8000b12:	224b      	movs	r2, #75	; 0x4b
 8000b14:	2100      	movs	r1, #0
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <drawstick+0x13c>)
 8000b18:	f7ff fe1c 	bl	8000754 <fillstring>
}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200008dc 	.word	0x200008dc
 8000b28:	20005100 	.word	0x20005100
 8000b2c:	200008e0 	.word	0x200008e0
 8000b30:	200008e4 	.word	0x200008e4
 8000b34:	200008ec 	.word	0x200008ec
 8000b38:	08006a7c 	.word	0x08006a7c
 8000b3c:	20005290 	.word	0x20005290
 8000b40:	200008e8 	.word	0x200008e8
 8000b44:	08006a84 	.word	0x08006a84
 8000b48:	200047bc 	.word	0x200047bc
 8000b4c:	200008cc 	.word	0x200008cc
 8000b50:	200008f0 	.word	0x200008f0
 8000b54:	88888889 	.word	0x88888889
 8000b58:	08006a8c 	.word	0x08006a8c
 8000b5c:	20004758 	.word	0x20004758

08000b60 <clear_text_input>:
char text_input[256];
int text_p = 0;
int text_max_len = 2;
char* text_input_hint = "";

void clear_text_input() {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
	for(int i = 0;i<text_p;i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	e007      	b.n	8000b7c <clear_text_input+0x1c>
		text_input[i] = 0;
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <clear_text_input+0x38>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<text_p;i++) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <clear_text_input+0x3c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf2      	blt.n	8000b6c <clear_text_input+0xc>
	}
	text_p = 0;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <clear_text_input+0x3c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	20004820 	.word	0x20004820
 8000b9c:	200008f8 	.word	0x200008f8

08000ba0 <text_input_append>:

void text_input_append(char c) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	if (text_p >= text_max_len) return;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <text_input_append+0x34>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <text_input_append+0x38>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	da08      	bge.n	8000bc8 <text_input_append+0x28>
	text_input[text_p++] = c;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <text_input_append+0x34>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <text_input_append+0x34>)
 8000bbe:	600a      	str	r2, [r1, #0]
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <text_input_append+0x3c>)
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	54ca      	strb	r2, [r1, r3]
 8000bc6:	e000      	b.n	8000bca <text_input_append+0x2a>
	if (text_p >= text_max_len) return;
 8000bc8:	bf00      	nop
}
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	200008f8 	.word	0x200008f8
 8000bd8:	20000020 	.word	0x20000020
 8000bdc:	20004820 	.word	0x20004820

08000be0 <text_input_backspace>:

void text_input_backspace() {
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	if(text_p == 0) return;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <text_input_backspace+0x2c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00a      	beq.n	8000c02 <text_input_backspace+0x22>
	text_input[--text_p] = 0;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <text_input_backspace+0x2c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <text_input_backspace+0x2c>)
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <text_input_backspace+0x2c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <text_input_backspace+0x30>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	54d1      	strb	r1, [r2, r3]
 8000c00:	e000      	b.n	8000c04 <text_input_backspace+0x24>
	if(text_p == 0) return;
 8000c02:	bf00      	nop
}
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	200008f8 	.word	0x200008f8
 8000c10:	20004820 	.word	0x20004820

08000c14 <text_input_read_int>:

int text_input_read_int() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	return atoi(text_input);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <text_input_read_int+0x10>)
 8000c1a:	f005 f987 	bl	8005f2c <atoi>
 8000c1e:	4603      	mov	r3, r0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20004820 	.word	0x20004820

08000c28 <fill_text_input_center>:

void fill_text_input(int r, int c) {
	fillstring(text_input, r, c);
}

void fill_text_input_center(int r) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	fillstringcenter(text_input, r, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <fill_text_input_center+0x1c>)
 8000c36:	f7ff fdbb 	bl	80007b0 <fillstringcenter>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20004820 	.word	0x20004820

08000c48 <render_text_input_screen>:

void render_text_input_screen(char* title) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	int TITLE_ROW = 8;
 8000c50:	2308      	movs	r3, #8
 8000c52:	617b      	str	r3, [r7, #20]
	int INPUT_ROW = 12;
 8000c54:	230c      	movs	r3, #12
 8000c56:	613b      	str	r3, [r7, #16]
	int HINT_ROW = 13;
 8000c58:	230d      	movs	r3, #13
 8000c5a:	60fb      	str	r3, [r7, #12]
	int ENTER_ROW = 16;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	60bb      	str	r3, [r7, #8]

	fillstringcenter(title, TITLE_ROW, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6979      	ldr	r1, [r7, #20]
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fda3 	bl	80007b0 <fillstringcenter>
	fill_text_input_center(INPUT_ROW);
 8000c6a:	6938      	ldr	r0, [r7, #16]
 8000c6c:	f7ff ffdc 	bl	8000c28 <fill_text_input_center>
	fillstringcenter(text_input_hint, HINT_ROW, 0);
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <render_text_input_screen+0x48>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2200      	movs	r2, #0
 8000c76:	68f9      	ldr	r1, [r7, #12]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fd99 	bl	80007b0 <fillstringcenter>
	fillstringcenter("Press ENTER to Submit, ESC to Back", ENTER_ROW, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <render_text_input_screen+0x4c>)
 8000c84:	f7ff fd94 	bl	80007b0 <fillstringcenter>
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000024 	.word	0x20000024
 8000c94:	08006a9c 	.word	0x08006a9c

08000c98 <render_how_to_play>:

/*
 * ============== HOW TO PLAY ==============
 */
void render_how_to_play() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
	int TITLE_ROW = 5;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	60bb      	str	r3, [r7, #8]
	int CONTENT_ROW = 9;
 8000ca2:	2309      	movs	r3, #9
 8000ca4:	607b      	str	r3, [r7, #4]
	int CONTINUE_ROW = 17;
 8000ca6:	2311      	movs	r3, #17
 8000ca8:	603b      	str	r3, [r7, #0]

	fillstringcenter("HOW TO PLAY", TITLE_ROW, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <render_how_to_play+0x58>)
 8000cb0:	f7ff fd7e 	bl	80007b0 <fillstringcenter>

	for(int i = 0; i < 3; i++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e00e      	b.n	8000cd8 <render_how_to_play+0x40>
		fillstringcenter(HOW_TO_PLAY[i], CONTENT_ROW + i*2, 0);
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <render_how_to_play+0x5c>)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	005a      	lsls	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fd6f 	bl	80007b0 <fillstringcenter>
	for(int i = 0; i < 3; i++) {
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	dded      	ble.n	8000cba <render_how_to_play+0x22>
	}

	fillstringcenter("Press any key to continue...", CONTINUE_ROW, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	6839      	ldr	r1, [r7, #0]
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <render_how_to_play+0x60>)
 8000ce4:	f7ff fd64 	bl	80007b0 <fillstringcenter>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080069a8 	.word	0x080069a8
 8000cf4:	20000014 	.word	0x20000014
 8000cf8:	08006ac0 	.word	0x08006ac0

08000cfc <render_congratulation>:
/*
 * ============== CONGRATULATION ==============
 */
int finish_time = 0;

void render_congratulation() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
	int TITLE_ROW = 5;
 8000d02:	2305      	movs	r3, #5
 8000d04:	617b      	str	r3, [r7, #20]
	int CONTENT_ROW = 11;
 8000d06:	230b      	movs	r3, #11
 8000d08:	613b      	str	r3, [r7, #16]
	int CONTINUE_ROW = 18;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	60fb      	str	r3, [r7, #12]

	fillstringcenter("CONGRATULATION", TITLE_ROW, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6979      	ldr	r1, [r7, #20]
 8000d12:	482c      	ldr	r0, [pc, #176]	; (8000dc4 <render_congratulation+0xc8>)
 8000d14:	f7ff fd4c 	bl	80007b0 <fillstringcenter>
	fillstringcenter("YOU HAVE SORTED IT USING", TITLE_ROW + 1, 0);
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4829      	ldr	r0, [pc, #164]	; (8000dc8 <render_congratulation+0xcc>)
 8000d22:	f7ff fd45 	bl	80007b0 <fillstringcenter>

	int play_min = (finish_time - play_start_time) / 60;
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <render_congratulation+0xd0>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <render_congratulation+0xd4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <render_congratulation+0xd8>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	441a      	add	r2, r3
 8000d38:	1152      	asrs	r2, r2, #5
 8000d3a:	17db      	asrs	r3, r3, #31
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	60bb      	str	r3, [r7, #8]
	int play_second = (finish_time - play_start_time) % 60;
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <render_congratulation+0xd0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <render_congratulation+0xd4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <render_congratulation+0xd8>)
 8000d4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d50:	4413      	add	r3, r2
 8000d52:	1159      	asrs	r1, r3, #5
 8000d54:	17d3      	asrs	r3, r2, #31
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	607b      	str	r3, [r7, #4]

	sprintf(swap_score_text, "SWAP %d", swap_count);
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <render_congratulation+0xdc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	491c      	ldr	r1, [pc, #112]	; (8000ddc <render_congratulation+0xe0>)
 8000d6c:	481c      	ldr	r0, [pc, #112]	; (8000de0 <render_congratulation+0xe4>)
 8000d6e:	f005 f953 	bl	8006018 <siprintf>
	sprintf(scan_score_text, "SCAN %d", scan_count);
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <render_congratulation+0xe8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	491b      	ldr	r1, [pc, #108]	; (8000de8 <render_congratulation+0xec>)
 8000d7a:	481c      	ldr	r0, [pc, #112]	; (8000dec <render_congratulation+0xf0>)
 8000d7c:	f005 f94c 	bl	8006018 <siprintf>
	sprintf(play_time_text, "TIME %02d:%02d", play_min, play_second);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	491a      	ldr	r1, [pc, #104]	; (8000df0 <render_congratulation+0xf4>)
 8000d86:	481b      	ldr	r0, [pc, #108]	; (8000df4 <render_congratulation+0xf8>)
 8000d88:	f005 f946 	bl	8006018 <siprintf>

	fillstring(swap_score_text, CONTENT_ROW, 35);
 8000d8c:	2223      	movs	r2, #35	; 0x23
 8000d8e:	6939      	ldr	r1, [r7, #16]
 8000d90:	4813      	ldr	r0, [pc, #76]	; (8000de0 <render_congratulation+0xe4>)
 8000d92:	f7ff fcdf 	bl	8000754 <fillstring>
	fillstring(scan_score_text, CONTENT_ROW + 1, 35);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	2223      	movs	r2, #35	; 0x23
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <render_congratulation+0xf0>)
 8000da0:	f7ff fcd8 	bl	8000754 <fillstring>
	fillstring(play_time_text, CONTENT_ROW + 2, 35);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3302      	adds	r3, #2
 8000da8:	2223      	movs	r2, #35	; 0x23
 8000daa:	4619      	mov	r1, r3
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <render_congratulation+0xf8>)
 8000dae:	f7ff fcd1 	bl	8000754 <fillstring>

	fillstringcenter("Press ENTER to continue...", CONTINUE_ROW, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	4810      	ldr	r0, [pc, #64]	; (8000df8 <render_congratulation+0xfc>)
 8000db8:	f7ff fcfa 	bl	80007b0 <fillstringcenter>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	08006ae0 	.word	0x08006ae0
 8000dc8:	08006af0 	.word	0x08006af0
 8000dcc:	200008fc 	.word	0x200008fc
 8000dd0:	200008f0 	.word	0x200008f0
 8000dd4:	88888889 	.word	0x88888889
 8000dd8:	200008ec 	.word	0x200008ec
 8000ddc:	08006a7c 	.word	0x08006a7c
 8000de0:	20005290 	.word	0x20005290
 8000de4:	200008e8 	.word	0x200008e8
 8000de8:	08006a84 	.word	0x08006a84
 8000dec:	200047bc 	.word	0x200047bc
 8000df0:	08006b0c 	.word	0x08006b0c
 8000df4:	20004758 	.word	0x20004758
 8000df8:	08006b1c 	.word	0x08006b1c

08000dfc <change_screen>:

/*
 * ============== SCREEN CONTROLLER ==============
 */

void change_screen(int name) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	curr_screen = name;
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <change_screen+0x74>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
	switch(name) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d82b      	bhi.n	8000e68 <change_screen+0x6c>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <change_screen+0x1c>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e31 	.word	0x08000e31
 8000e1c:	08000e3f 	.word	0x08000e3f
 8000e20:	08000e69 	.word	0x08000e69
 8000e24:	08000e4b 	.word	0x08000e4b
 8000e28:	08000e69 	.word	0x08000e69
 8000e2c:	08000e59 	.word	0x08000e59
	case SCREEN_MAIN_MENU:
		menu_activei = 0;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <change_screen+0x78>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
		menu_maxi = 1;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <change_screen+0x7c>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
		break;
 8000e3c:	e014      	b.n	8000e68 <change_screen+0x6c>
	case SCREEN_INPUT_SIZE:
		clear_text_input();
 8000e3e:	f7ff fe8f 	bl	8000b60 <clear_text_input>
		text_max_len = 2;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <change_screen+0x80>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	601a      	str	r2, [r3, #0]
		break;
 8000e48:	e00e      	b.n	8000e68 <change_screen+0x6c>
	case SCREEN_PAUSE:
		menu_activei = 0;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <change_screen+0x78>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
		menu_maxi = 2;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <change_screen+0x7c>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	601a      	str	r2, [r3, #0]
		break;
 8000e56:	e007      	b.n	8000e68 <change_screen+0x6c>
	case SCREEN_CONGRATULATION:
		is_playing = 0;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <change_screen+0x84>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
		finish_time = curr_time;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <change_screen+0x88>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <change_screen+0x8c>)
 8000e64:	6013      	str	r3, [r2, #0]
		break;
 8000e66:	bf00      	nop
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200008d0 	.word	0x200008d0
 8000e74:	200008d4 	.word	0x200008d4
 8000e78:	200008d8 	.word	0x200008d8
 8000e7c:	20000020 	.word	0x20000020
 8000e80:	200008f4 	.word	0x200008f4
 8000e84:	200008cc 	.word	0x200008cc
 8000e88:	200008fc 	.word	0x200008fc

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	change_screen(SCREEN_MAIN_MENU);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ffb2 	bl	8000dfc <change_screen>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 fc44 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f836 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f000 f8c8 	bl	8001034 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea4:	f000 f89c 	bl	8000fe0 <MX_USART2_UART_Init>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of secondTick */
  osTimerDef(secondTick, secondTickCallback);
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <main+0x70>)
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  secondTickHandle = osTimerCreate(osTimer(secondTick), osTimerPeriodic, NULL);
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 fba1 	bl	8003600 <osTimerCreate>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <main+0x74>)
 8000ec2:	601a      	str	r2, [r3, #0]
  osTimerStart(secondTickHandle, 1000);
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <main+0x74>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fbcb 	bl	8003668 <osTimerStart>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <main+0x78>)
 8000ed4:	1d3c      	adds	r4, r7, #4
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fb28 	bl	800353e <osThreadCreate>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <main+0x7c>)
 8000ef2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ef4:	f002 fb1c 	bl	8003530 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x6c>
 8000efa:	bf00      	nop
 8000efc:	080014bd 	.word	0x080014bd
 8000f00:	200050bc 	.word	0x200050bc
 8000f04:	08006b44 	.word	0x08006b44
 8000f08:	20004754 	.word	0x20004754

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 f83f 	bl	8005f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f86:	2304      	movs	r3, #4
 8000f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 ff08 	bl	8001da8 <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f9e:	f000 fa9f 	bl	80014e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 f962 	bl	8002288 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fca:	f000 fa89 	bl	80014e0 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	; 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_USART2_UART_Init+0x50>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001018:	f001 fb28 	bl	800266c <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001022:	f000 fa5d 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200050c0 	.word	0x200050c0
 8001030:	40004400 	.word	0x40004400

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_GPIO_Init+0xd0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <MX_GPIO_Init+0xd0>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_GPIO_Init+0xd0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_GPIO_Init+0xd0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_GPIO_Init+0xd0>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_GPIO_Init+0xd0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <MX_GPIO_Init+0xd4>)
 80010c0:	f000 fe58 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_GPIO_Init+0xd8>)
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_GPIO_Init+0xdc>)
 80010da:	f000 fcc9 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010de:	2320      	movs	r3, #32
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0xd4>)
 80010f6:	f000 fcbb 	bl	8001a70 <HAL_GPIO_Init>

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000
 800110c:	10210000 	.word	0x10210000
 8001110:	40020800 	.word	0x40020800

08001114 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	int old_number_active_i;

	switch (curr_screen) {
 800111c:	4b99      	ldr	r3, [pc, #612]	; (8001384 <HAL_UART_RxCpltCallback+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b05      	cmp	r3, #5
 8001122:	f200 8126 	bhi.w	8001372 <HAL_UART_RxCpltCallback+0x25e>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <HAL_UART_RxCpltCallback+0x18>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	08001145 	.word	0x08001145
 8001130:	08001185 	.word	0x08001185
 8001134:	08001203 	.word	0x08001203
 8001138:	080012ed 	.word	0x080012ed
 800113c:	0800135d 	.word	0x0800135d
 8001140:	0800135d 	.word	0x0800135d
	case SCREEN_MAIN_MENU:
		switch(input) {
 8001144:	4b90      	ldr	r3, [pc, #576]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b73      	cmp	r3, #115	; 0x73
 800114a:	d004      	beq.n	8001156 <HAL_UART_RxCpltCallback+0x42>
 800114c:	2b77      	cmp	r3, #119	; 0x77
 800114e:	d005      	beq.n	800115c <HAL_UART_RxCpltCallback+0x48>
 8001150:	2b0d      	cmp	r3, #13
 8001152:	d006      	beq.n	8001162 <HAL_UART_RxCpltCallback+0x4e>
			} else if (menu_activei == 1) {
				change_screen(SCREEN_HOW_TO_PLAY);
			}
			break;
		}
		break;
 8001154:	e10d      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
			menu_down();
 8001156:	f7ff fb87 	bl	8000868 <menu_down>
			break;
 800115a:	e012      	b.n	8001182 <HAL_UART_RxCpltCallback+0x6e>
			menu_up();
 800115c:	f7ff fb6e 	bl	800083c <menu_up>
			break;
 8001160:	e00f      	b.n	8001182 <HAL_UART_RxCpltCallback+0x6e>
			if (menu_activei == 0) {
 8001162:	4b8a      	ldr	r3, [pc, #552]	; (800138c <HAL_UART_RxCpltCallback+0x278>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <HAL_UART_RxCpltCallback+0x5e>
				change_screen(SCREEN_INPUT_SIZE);
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fe46 	bl	8000dfc <change_screen>
			break;
 8001170:	e006      	b.n	8001180 <HAL_UART_RxCpltCallback+0x6c>
			} else if (menu_activei == 1) {
 8001172:	4b86      	ldr	r3, [pc, #536]	; (800138c <HAL_UART_RxCpltCallback+0x278>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d102      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x6c>
				change_screen(SCREEN_HOW_TO_PLAY);
 800117a:	2004      	movs	r0, #4
 800117c:	f7ff fe3e 	bl	8000dfc <change_screen>
			break;
 8001180:	bf00      	nop
		break;
 8001182:	e0f6      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
	case SCREEN_INPUT_SIZE:
		if (input >= '0' && input <= '9') {
 8001184:	4b80      	ldr	r3, [pc, #512]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b2f      	cmp	r3, #47	; 0x2f
 800118a:	d909      	bls.n	80011a0 <HAL_UART_RxCpltCallback+0x8c>
 800118c:	4b7e      	ldr	r3, [pc, #504]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b39      	cmp	r3, #57	; 0x39
 8001192:	d805      	bhi.n	80011a0 <HAL_UART_RxCpltCallback+0x8c>
			text_input_append(input);
 8001194:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd01 	bl	8000ba0 <text_input_append>
 800119e:	e02f      	b.n	8001200 <HAL_UART_RxCpltCallback+0xec>
		} else if (input == CHAR_ENTER) {
 80011a0:	4b79      	ldr	r3, [pc, #484]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b0d      	cmp	r3, #13
 80011a6:	d11b      	bne.n	80011e0 <HAL_UART_RxCpltCallback+0xcc>
			if (text_p == 0) {
 80011a8:	4b79      	ldr	r3, [pc, #484]	; (8001390 <HAL_UART_RxCpltCallback+0x27c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0xa4>
				text_input_hint = "Cannot empty";
 80011b0:	4b78      	ldr	r3, [pc, #480]	; (8001394 <HAL_UART_RxCpltCallback+0x280>)
 80011b2:	4a79      	ldr	r2, [pc, #484]	; (8001398 <HAL_UART_RxCpltCallback+0x284>)
 80011b4:	601a      	str	r2, [r3, #0]
		} else if (input == CHAR_BACKSPACE) {
			text_input_backspace();
		} else if (input == CHAR_ESC) {
			change_screen(SCREEN_MAIN_MENU);
		}
		break;
 80011b6:	e0d9      	b.n	800136c <HAL_UART_RxCpltCallback+0x258>
				int size = text_input_read_int();
 80011b8:	f7ff fd2c 	bl	8000c14 <text_input_read_int>
 80011bc:	60b8      	str	r0, [r7, #8]
				if (size > 0 && size <= 80) {
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	dd09      	ble.n	80011d8 <HAL_UART_RxCpltCallback+0xc4>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b50      	cmp	r3, #80	; 0x50
 80011c8:	dc06      	bgt.n	80011d8 <HAL_UART_RxCpltCallback+0xc4>
					initstick(size);
 80011ca:	68b8      	ldr	r0, [r7, #8]
 80011cc:	f7ff fbe4 	bl	8000998 <initstick>
					change_screen(SCREEN_PLAY);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff fe13 	bl	8000dfc <change_screen>
 80011d6:	e013      	b.n	8001200 <HAL_UART_RxCpltCallback+0xec>
					text_input_hint = "Must be 1 - 80";
 80011d8:	4b6e      	ldr	r3, [pc, #440]	; (8001394 <HAL_UART_RxCpltCallback+0x280>)
 80011da:	4a70      	ldr	r2, [pc, #448]	; (800139c <HAL_UART_RxCpltCallback+0x288>)
 80011dc:	601a      	str	r2, [r3, #0]
		break;
 80011de:	e0c5      	b.n	800136c <HAL_UART_RxCpltCallback+0x258>
		} else if (input == CHAR_BACKSPACE) {
 80011e0:	4b69      	ldr	r3, [pc, #420]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d102      	bne.n	80011ee <HAL_UART_RxCpltCallback+0xda>
			text_input_backspace();
 80011e8:	f7ff fcfa 	bl	8000be0 <text_input_backspace>
		break;
 80011ec:	e0be      	b.n	800136c <HAL_UART_RxCpltCallback+0x258>
		} else if (input == CHAR_ESC) {
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b1b      	cmp	r3, #27
 80011f4:	f040 80ba 	bne.w	800136c <HAL_UART_RxCpltCallback+0x258>
			change_screen(SCREEN_MAIN_MENU);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fdff 	bl	8000dfc <change_screen>
		break;
 80011fe:	e0b5      	b.n	800136c <HAL_UART_RxCpltCallback+0x258>
 8001200:	e0b4      	b.n	800136c <HAL_UART_RxCpltCallback+0x258>

	case SCREEN_PLAY:
		old_number_active_i = number_active_i;
 8001202:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
		switch(input) {
 8001208:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b20      	cmp	r3, #32
 800120e:	d05d      	beq.n	80012cc <HAL_UART_RxCpltCallback+0x1b8>
 8001210:	2b20      	cmp	r3, #32
 8001212:	dc02      	bgt.n	800121a <HAL_UART_RxCpltCallback+0x106>
 8001214:	2b1b      	cmp	r3, #27
 8001216:	d064      	beq.n	80012e2 <HAL_UART_RxCpltCallback+0x1ce>
			break;
		case CHAR_ESC:
			change_screen(SCREEN_PAUSE);
			break;
		}
		break;
 8001218:	e0ab      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
		switch(input) {
 800121a:	2b61      	cmp	r3, #97	; 0x61
 800121c:	d002      	beq.n	8001224 <HAL_UART_RxCpltCallback+0x110>
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d02a      	beq.n	8001278 <HAL_UART_RxCpltCallback+0x164>
		break;
 8001222:	e0a6      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
			number_active_i--;
 8001224:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 800122c:	6013      	str	r3, [r2, #0]
			if (number_active_i < 0) number_active_i = number_len - 1;
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	da04      	bge.n	8001240 <HAL_UART_RxCpltCallback+0x12c>
 8001236:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <HAL_UART_RxCpltCallback+0x290>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 800123e:	6013      	str	r3, [r2, #0]
			if (number_swap_mode) {
 8001240:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <HAL_UART_RxCpltCallback+0x294>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d011      	beq.n	800126c <HAL_UART_RxCpltCallback+0x158>
				swap(&numbers[old_number_active_i], &numbers[number_active_i]);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4a57      	ldr	r2, [pc, #348]	; (80013ac <HAL_UART_RxCpltCallback+0x298>)
 800124e:	1898      	adds	r0, r3, r2
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4a55      	ldr	r2, [pc, #340]	; (80013ac <HAL_UART_RxCpltCallback+0x298>)
 8001258:	4413      	add	r3, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff f9f3 	bl	8000646 <swap>
				swap_count++;
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001268:	6013      	str	r3, [r2, #0]
			break;
 800126a:	e03e      	b.n	80012ea <HAL_UART_RxCpltCallback+0x1d6>
				scan_count++;
 800126c:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001274:	6013      	str	r3, [r2, #0]
			break;
 8001276:	e038      	b.n	80012ea <HAL_UART_RxCpltCallback+0x1d6>
			number_active_i++;
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a48      	ldr	r2, [pc, #288]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001280:	6013      	str	r3, [r2, #0]
			if (number_active_i >= number_len) number_active_i = 0;
 8001282:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_UART_RxCpltCallback+0x290>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	db02      	blt.n	8001294 <HAL_UART_RxCpltCallback+0x180>
 800128e:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
			if (number_swap_mode) {
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <HAL_UART_RxCpltCallback+0x294>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d011      	beq.n	80012c0 <HAL_UART_RxCpltCallback+0x1ac>
				swap(&numbers[old_number_active_i], &numbers[number_active_i]);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4a42      	ldr	r2, [pc, #264]	; (80013ac <HAL_UART_RxCpltCallback+0x298>)
 80012a2:	1898      	adds	r0, r3, r2
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_UART_RxCpltCallback+0x28c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <HAL_UART_RxCpltCallback+0x298>)
 80012ac:	4413      	add	r3, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff f9c9 	bl	8000646 <swap>
				swap_count++;
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <HAL_UART_RxCpltCallback+0x29c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <HAL_UART_RxCpltCallback+0x29c>)
 80012bc:	6013      	str	r3, [r2, #0]
			break;
 80012be:	e014      	b.n	80012ea <HAL_UART_RxCpltCallback+0x1d6>
				scan_count++;
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <HAL_UART_RxCpltCallback+0x2a0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a3b      	ldr	r2, [pc, #236]	; (80013b4 <HAL_UART_RxCpltCallback+0x2a0>)
 80012c8:	6013      	str	r3, [r2, #0]
			break;
 80012ca:	e00e      	b.n	80012ea <HAL_UART_RxCpltCallback+0x1d6>
			number_swap_mode = !number_swap_mode;
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_UART_RxCpltCallback+0x294>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_UART_RxCpltCallback+0x294>)
 80012de:	601a      	str	r2, [r3, #0]
			break;
 80012e0:	e003      	b.n	80012ea <HAL_UART_RxCpltCallback+0x1d6>
			change_screen(SCREEN_PAUSE);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f7ff fd8a 	bl	8000dfc <change_screen>
			break;
 80012e8:	bf00      	nop
		break;
 80012ea:	e042      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>

	case SCREEN_PAUSE:
		switch(input) {
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b1b      	cmp	r3, #27
 80012f2:	d02d      	beq.n	8001350 <HAL_UART_RxCpltCallback+0x23c>
 80012f4:	2b1b      	cmp	r3, #27
 80012f6:	dc02      	bgt.n	80012fe <HAL_UART_RxCpltCallback+0x1ea>
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	d00b      	beq.n	8001314 <HAL_UART_RxCpltCallback+0x200>
			break;
		case CHAR_ESC:
			change_screen(SCREEN_PLAY);
			break;
		}
		break;
 80012fc:	e039      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
		switch(input) {
 80012fe:	2b73      	cmp	r3, #115	; 0x73
 8001300:	d002      	beq.n	8001308 <HAL_UART_RxCpltCallback+0x1f4>
 8001302:	2b77      	cmp	r3, #119	; 0x77
 8001304:	d003      	beq.n	800130e <HAL_UART_RxCpltCallback+0x1fa>
		break;
 8001306:	e034      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
			menu_down();
 8001308:	f7ff faae 	bl	8000868 <menu_down>
			break;
 800130c:	e025      	b.n	800135a <HAL_UART_RxCpltCallback+0x246>
			menu_up();
 800130e:	f7ff fa95 	bl	800083c <menu_up>
			break;
 8001312:	e022      	b.n	800135a <HAL_UART_RxCpltCallback+0x246>
			if (menu_activei == 0) {
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_UART_RxCpltCallback+0x278>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d103      	bne.n	8001324 <HAL_UART_RxCpltCallback+0x210>
				change_screen(SCREEN_PLAY);
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff fd6d 	bl	8000dfc <change_screen>
			break;
 8001322:	e019      	b.n	8001358 <HAL_UART_RxCpltCallback+0x244>
			} else if (menu_activei == 1) {
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_UART_RxCpltCallback+0x278>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d106      	bne.n	800133a <HAL_UART_RxCpltCallback+0x226>
				is_playing = 0;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_UART_RxCpltCallback+0x2a4>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
				change_screen(SCREEN_INPUT_SIZE);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fd62 	bl	8000dfc <change_screen>
			break;
 8001338:	e00e      	b.n	8001358 <HAL_UART_RxCpltCallback+0x244>
			} else if (menu_activei == 2) {
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_UART_RxCpltCallback+0x278>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d10a      	bne.n	8001358 <HAL_UART_RxCpltCallback+0x244>
				is_playing = 0;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
				change_screen(SCREEN_MAIN_MENU);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fd57 	bl	8000dfc <change_screen>
			break;
 800134e:	e003      	b.n	8001358 <HAL_UART_RxCpltCallback+0x244>
			change_screen(SCREEN_PLAY);
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fd53 	bl	8000dfc <change_screen>
			break;
 8001356:	e000      	b.n	800135a <HAL_UART_RxCpltCallback+0x246>
			break;
 8001358:	bf00      	nop
		break;
 800135a:	e00a      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>

	case SCREEN_HOW_TO_PLAY:
	case SCREEN_CONGRATULATION:
		if (input == CHAR_ENTER) {
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b0d      	cmp	r3, #13
 8001362:	d105      	bne.n	8001370 <HAL_UART_RxCpltCallback+0x25c>
			change_screen(SCREEN_MAIN_MENU);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fd49 	bl	8000dfc <change_screen>
		}
		break;
 800136a:	e001      	b.n	8001370 <HAL_UART_RxCpltCallback+0x25c>
		break;
 800136c:	bf00      	nop
 800136e:	e000      	b.n	8001372 <HAL_UART_RxCpltCallback+0x25e>
		break;
 8001370:	bf00      	nop
	}

	HAL_UART_Receive_IT(&huart2, &input, sizeof(input));
 8001372:	2201      	movs	r2, #1
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <HAL_UART_RxCpltCallback+0x274>)
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <HAL_UART_RxCpltCallback+0x2a8>)
 8001378:	f001 fa5e 	bl	8002838 <HAL_UART_Receive_IT>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200008d0 	.word	0x200008d0
 8001388:	200050b8 	.word	0x200050b8
 800138c:	200008d4 	.word	0x200008d4
 8001390:	200008f8 	.word	0x200008f8
 8001394:	20000024 	.word	0x20000024
 8001398:	08006b60 	.word	0x08006b60
 800139c:	08006b70 	.word	0x08006b70
 80013a0:	200008e0 	.word	0x200008e0
 80013a4:	200008dc 	.word	0x200008dc
 80013a8:	200008e4 	.word	0x200008e4
 80013ac:	20005100 	.word	0x20005100
 80013b0:	200008ec 	.word	0x200008ec
 80013b4:	200008e8 	.word	0x200008e8
 80013b8:	200008f4 	.word	0x200008f4
 80013bc:	200050c0 	.word	0x200050c0

080013c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_UART_Receive_IT(&huart2, &input, sizeof(input));
 80013c8:	2201      	movs	r2, #1
 80013ca:	4932      	ldr	r1, [pc, #200]	; (8001494 <StartDefaultTask+0xd4>)
 80013cc:	4832      	ldr	r0, [pc, #200]	; (8001498 <StartDefaultTask+0xd8>)
 80013ce:	f001 fa33 	bl	8002838 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for (;;) {
		resetscreen();
 80013d2:	f7ff f98b 	bl	80006ec <resetscreen>

		// Check for play sorted
		if (is_playing) {
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <StartDefaultTask+0xdc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d021      	beq.n	8001422 <StartDefaultTask+0x62>
			int is_sorted = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
			for(int i = 0;i<number_len-1;i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	e010      	b.n	800140a <StartDefaultTask+0x4a>
				if (numbers[i] > numbers[i+1]) {
 80013e8:	4a2d      	ldr	r2, [pc, #180]	; (80014a0 <StartDefaultTask+0xe0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3301      	adds	r3, #1
 80013f4:	492a      	ldr	r1, [pc, #168]	; (80014a0 <StartDefaultTask+0xe0>)
 80013f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dd02      	ble.n	8001404 <StartDefaultTask+0x44>
					is_sorted = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
					break;
 8001402:	e008      	b.n	8001416 <StartDefaultTask+0x56>
			for(int i = 0;i<number_len-1;i++) {
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	3301      	adds	r3, #1
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <StartDefaultTask+0xe4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3b01      	subs	r3, #1
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbe8      	blt.n	80013e8 <StartDefaultTask+0x28>
				}
			}

			if (is_sorted) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <StartDefaultTask+0x62>
				change_screen(SCREEN_CONGRATULATION);
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff fced 	bl	8000dfc <change_screen>
			}
		}

		switch(curr_screen) {
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <StartDefaultTask+0xe8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d82b      	bhi.n	8001482 <StartDefaultTask+0xc2>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <StartDefaultTask+0x70>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001449 	.word	0x08001449
 8001434:	08001459 	.word	0x08001459
 8001438:	08001461 	.word	0x08001461
 800143c:	08001467 	.word	0x08001467
 8001440:	08001477 	.word	0x08001477
 8001444:	0800147d 	.word	0x0800147d
		case SCREEN_MAIN_MENU:
			fillmenu(MAIN_MENU, 2, menu_activei);
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <StartDefaultTask+0xec>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	2102      	movs	r1, #2
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <StartDefaultTask+0xf0>)
 8001452:	f7ff fa23 	bl	800089c <fillmenu>
			break;
 8001456:	e014      	b.n	8001482 <StartDefaultTask+0xc2>
		case SCREEN_INPUT_SIZE:
			render_text_input_screen("Input array size (Maximum 80)");
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <StartDefaultTask+0xf4>)
 800145a:	f7ff fbf5 	bl	8000c48 <render_text_input_screen>
			break;
 800145e:	e010      	b.n	8001482 <StartDefaultTask+0xc2>
		case SCREEN_PLAY:
			drawstick();
 8001460:	f7ff fade 	bl	8000a20 <drawstick>
			break;
 8001464:	e00d      	b.n	8001482 <StartDefaultTask+0xc2>
		case SCREEN_PAUSE:
			fillmenu(PAUSE_MENU, 3, menu_activei);
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <StartDefaultTask+0xec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	2103      	movs	r1, #3
 800146e:	4812      	ldr	r0, [pc, #72]	; (80014b8 <StartDefaultTask+0xf8>)
 8001470:	f7ff fa14 	bl	800089c <fillmenu>
			break;
 8001474:	e005      	b.n	8001482 <StartDefaultTask+0xc2>
		case SCREEN_HOW_TO_PLAY:
			render_how_to_play();
 8001476:	f7ff fc0f 	bl	8000c98 <render_how_to_play>
			break;
 800147a:	e002      	b.n	8001482 <StartDefaultTask+0xc2>
		case SCREEN_CONGRATULATION:
			render_congratulation();
 800147c:	f7ff fc3e 	bl	8000cfc <render_congratulation>
			break;
 8001480:	bf00      	nop
		}

		int not_used = rand();
 8001482:	f004 fd95 	bl	8005fb0 <rand>
 8001486:	60f8      	str	r0, [r7, #12]

		printscreen();
 8001488:	f7ff f8f2 	bl	8000670 <printscreen>
		osDelay(200);
 800148c:	20c8      	movs	r0, #200	; 0xc8
 800148e:	f002 f8a2 	bl	80035d6 <osDelay>
	for (;;) {
 8001492:	e79e      	b.n	80013d2 <StartDefaultTask+0x12>
 8001494:	200050b8 	.word	0x200050b8
 8001498:	200050c0 	.word	0x200050c0
 800149c:	200008f4 	.word	0x200008f4
 80014a0:	20005100 	.word	0x20005100
 80014a4:	200008dc 	.word	0x200008dc
 80014a8:	200008d0 	.word	0x200008d0
 80014ac:	200008d4 	.word	0x200008d4
 80014b0:	20000000 	.word	0x20000000
 80014b4:	08006b80 	.word	0x08006b80
 80014b8:	20000008 	.word	0x20000008

080014bc <secondTickCallback>:
  /* USER CODE END 5 */ 
}

/* secondTickCallback function */
void secondTickCallback(void const * argument)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN secondTickCallback */
	curr_time++;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <secondTickCallback+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <secondTickCallback+0x20>)
 80014cc:	6013      	str	r3, [r2, #0]
  /* USER CODE END secondTickCallback */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200008cc 	.word	0x200008cc

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_MspInit+0x54>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_MspInit+0x54>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_MspInit+0x54>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_MspInit+0x54>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_MspInit+0x54>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_MspInit+0x54>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	210f      	movs	r1, #15
 8001532:	f06f 0001 	mvn.w	r0, #1
 8001536:	f000 fa42 	bl	80019be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_UART_MspInit+0x94>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d133      	bne.n	80015d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_UART_MspInit+0x98>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_UART_MspInit+0x98>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_UART_MspInit+0x98>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_UART_MspInit+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <HAL_UART_MspInit+0x98>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_UART_MspInit+0x98>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a2:	230c      	movs	r3, #12
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b2:	2307      	movs	r3, #7
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <HAL_UART_MspInit+0x9c>)
 80015be:	f000 fa57 	bl	8001a70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	210f      	movs	r1, #15
 80015c6:	2026      	movs	r0, #38	; 0x26
 80015c8:	f000 f9f9 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015cc:	2026      	movs	r0, #38	; 0x26
 80015ce:	f000 fa12 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	; 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40004400 	.word	0x40004400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 f8d2 	bl	80017c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001624:	f003 fbe2 	bl	8004dec <xTaskGetSchedulerState>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d001      	beq.n	8001632 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800162e:	f004 fa1b 	bl	8005a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <USART2_IRQHandler+0x10>)
 800163e:	f001 f951 	bl	80028e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200050c0 	.word	0x200050c0

0800164c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x50>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x16>
		heap_end = &end;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <_sbrk+0x50>)
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <_sbrk+0x54>)
 8001660:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <_sbrk+0x50>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <_sbrk+0x50>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	466a      	mov	r2, sp
 8001672:	4293      	cmp	r3, r2
 8001674:	d907      	bls.n	8001686 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001676:	f004 fc5d 	bl	8005f34 <__errno>
 800167a:	4602      	mov	r2, r0
 800167c:	230c      	movs	r3, #12
 800167e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	e006      	b.n	8001694 <_sbrk+0x48>
	}

	heap_end += incr;
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <_sbrk+0x50>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a03      	ldr	r2, [pc, #12]	; (800169c <_sbrk+0x50>)
 8001690:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000900 	.word	0x20000900
 80016a0:	20005340 	.word	0x20005340

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <SystemInit+0x28>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <SystemInit+0x28>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SystemInit+0x28>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016be:	609a      	str	r2, [r3, #8]
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd3 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f004 fc1f 	bl	8005f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff fbc3 	bl	8000e8c <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800170c:	08006d24 	.word	0x08006d24
  ldr  r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001714:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8001718:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 800171c:	2000533c 	.word	0x2000533c

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f92b 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff feca 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f943 	bl	8001a12 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f90b 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000028 	.word	0x20000028
 80017c0:	20000030 	.word	0x20000030
 80017c4:	2000002c 	.word	0x2000002c

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000030 	.word	0x20000030
 80017ec:	200052f4 	.word	0x200052f4

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200052f4 	.word	0x200052f4

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff29 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff3e 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff31 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa2 	bl	8001964 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d004      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e00c      	b.n	8001a62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e159      	b.n	8001d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8148 	bne.w	8001d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d00b      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0xfc>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a2 	beq.w	8001d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x202>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a47      	ldr	r2, [pc, #284]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x1fe>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_GPIO_Init+0x2f4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a45      	ldr	r2, [pc, #276]	; (8001d68 <HAL_GPIO_Init+0x2f8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x1f6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_GPIO_Init+0x2fc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x1f2>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4934      	ldr	r1, [pc, #208]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f aea2 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3724      	adds	r7, #36	; 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	619a      	str	r2, [r3, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e25b      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d075      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	4ba3      	ldr	r3, [pc, #652]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d00c      	beq.n	8001dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d112      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dde:	4b9d      	ldr	r3, [pc, #628]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	4b99      	ldr	r3, [pc, #612]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d05b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x108>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d157      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e236      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCC_OscConfig+0x74>
 8001e0e:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a90      	ldr	r2, [pc, #576]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e01d      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a87      	ldr	r2, [pc, #540]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e40:	4b84      	ldr	r3, [pc, #528]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a83      	ldr	r2, [pc, #524]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a80      	ldr	r2, [pc, #512]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fcc6 	bl	80017f0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fcc2 	bl	80017f0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1fb      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0xc0>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fcb2 	bl	80017f0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fcae 	bl	80017f0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1e7      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0xe8>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d063      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d11c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x152>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e1bb      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4952      	ldr	r1, [pc, #328]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	e03a      	b.n	8001f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f18:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <HAL_RCC_OscConfig+0x2b0>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fc67 	bl	80017f0 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff fc63 	bl	80017f0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e19c      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4940      	ldr	r1, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_OscConfig+0x2b0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc46 	bl	80017f0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f68:	f7ff fc42 	bl	80017f0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e17b      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d030      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_RCC_OscConfig+0x2b4>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fc26 	bl	80017f0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fc22 	bl	80017f0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e15b      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x200>
 8001fc6:	e015      	b.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_OscConfig+0x2b4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fc0f 	bl	80017f0 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fc0b 	bl	80017f0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e144      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a0 	beq.w	8002142 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x2b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d121      	bne.n	8002082 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_OscConfig+0x2b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_RCC_OscConfig+0x2b8>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fbd1 	bl	80017f0 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e011      	b.n	8002076 <HAL_RCC_OscConfig+0x2ce>
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	42470000 	.word	0x42470000
 800205c:	42470e80 	.word	0x42470e80
 8002060:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7ff fbc4 	bl	80017f0 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0fd      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b81      	ldr	r3, [pc, #516]	; (800227c <HAL_RCC_OscConfig+0x4d4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_RCC_OscConfig+0x2f0>
 800208a:	4b7d      	ldr	r3, [pc, #500]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a7c      	ldr	r2, [pc, #496]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x32a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x312>
 80020a0:	4b77      	ldr	r3, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a76      	ldr	r2, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b74      	ldr	r3, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a73      	ldr	r2, [pc, #460]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x32a>
 80020ba:	4b71      	ldr	r3, [pc, #452]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a70      	ldr	r2, [pc, #448]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	4a6d      	ldr	r2, [pc, #436]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff fb89 	bl	80017f0 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fb85 	bl	80017f0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0bc      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x33a>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff fb73 	bl	80017f0 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fb6f 	bl	80017f0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0a6      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b52      	ldr	r3, [pc, #328]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a51      	ldr	r2, [pc, #324]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8092 	beq.w	8002270 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d05c      	beq.n	8002212 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d141      	bne.n	80021e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_RCC_OscConfig+0x4dc>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb43 	bl	80017f0 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb3f 	bl	80017f0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e078      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	019b      	lsls	r3, r3, #6
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	4933      	ldr	r1, [pc, #204]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x4dc>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fb18 	bl	80017f0 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff fb14 	bl	80017f0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e04d      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x41c>
 80021e2:	e045      	b.n	8002270 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_OscConfig+0x4dc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fb01 	bl	80017f0 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff fafd 	bl	80017f0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e036      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x44a>
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e029      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_RCC_OscConfig+0x4d8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	429a      	cmp	r2, r3
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d115      	bne.n	800226c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002246:	4013      	ands	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224c:	4293      	cmp	r3, r2
 800224e:	d10d      	bne.n	800226c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40007000 	.word	0x40007000
 8002280:	40023800 	.word	0x40023800
 8002284:	42470060 	.word	0x42470060

08002288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0cc      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800229c:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_ClockConfig+0x1b8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d90c      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b65      	ldr	r3, [pc, #404]	; (8002440 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b8      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a58      	ldr	r2, [pc, #352]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f4:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	494d      	ldr	r1, [pc, #308]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d044      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d119      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07f      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d003      	beq.n	8002346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002342:	2b03      	cmp	r3, #3
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06f      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	4b3b      	ldr	r3, [pc, #236]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e067      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b37      	ldr	r3, [pc, #220]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4934      	ldr	r1, [pc, #208]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	4313      	orrs	r3, r2
 8002376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7ff fa3a 	bl	80017f0 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7ff fa36 	bl	80017f0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e04f      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 020c 	and.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1eb      	bne.n	8002380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_RCC_ClockConfig+0x1b8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d20c      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e032      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4916      	ldr	r1, [pc, #88]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	490e      	ldr	r1, [pc, #56]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240e:	f000 f821 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	5cd3      	ldrb	r3, [r2, r3]
 8002422:	fa21 f303 	lsr.w	r3, r1, r3
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff f99a 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023c00 	.word	0x40023c00
 8002444:	40023800 	.word	0x40023800
 8002448:	08006bbc 	.word	0x08006bbc
 800244c:	20000028 	.word	0x20000028
 8002450:	2000002c 	.word	0x2000002c

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d007      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x32>
 8002476:	2b08      	cmp	r3, #8
 8002478:	d008      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x38>
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 80b4 	bne.w	80025e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002482:	60bb      	str	r3, [r7, #8]
       break;
 8002484:	e0b3      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002488:	60bb      	str	r3, [r7, #8]
      break;
 800248a:	e0b0      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002494:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002496:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04a      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	f04f 0400 	mov.w	r4, #0
 80024ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	ea03 0501 	and.w	r5, r3, r1
 80024b8:	ea04 0602 	and.w	r6, r4, r2
 80024bc:	4629      	mov	r1, r5
 80024be:	4632      	mov	r2, r6
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	0154      	lsls	r4, r2, #5
 80024ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ce:	014b      	lsls	r3, r1, #5
 80024d0:	4619      	mov	r1, r3
 80024d2:	4622      	mov	r2, r4
 80024d4:	1b49      	subs	r1, r1, r5
 80024d6:	eb62 0206 	sbc.w	r2, r2, r6
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f04f 0400 	mov.w	r4, #0
 80024e2:	0194      	lsls	r4, r2, #6
 80024e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024e8:	018b      	lsls	r3, r1, #6
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	eb64 0402 	sbc.w	r4, r4, r2
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	00e2      	lsls	r2, r4, #3
 80024fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024fe:	00d9      	lsls	r1, r3, #3
 8002500:	460b      	mov	r3, r1
 8002502:	4614      	mov	r4, r2
 8002504:	195b      	adds	r3, r3, r5
 8002506:	eb44 0406 	adc.w	r4, r4, r6
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	0262      	lsls	r2, r4, #9
 8002514:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002518:	0259      	lsls	r1, r3, #9
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	4618      	mov	r0, r3
 8002520:	4621      	mov	r1, r4
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f04f 0400 	mov.w	r4, #0
 8002528:	461a      	mov	r2, r3
 800252a:	4623      	mov	r3, r4
 800252c:	f7fd feb0 	bl	8000290 <__aeabi_uldivmod>
 8002530:	4603      	mov	r3, r0
 8002532:	460c      	mov	r4, r1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e049      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	f04f 0400 	mov.w	r4, #0
 8002542:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	ea03 0501 	and.w	r5, r3, r1
 800254e:	ea04 0602 	and.w	r6, r4, r2
 8002552:	4629      	mov	r1, r5
 8002554:	4632      	mov	r2, r6
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	0154      	lsls	r4, r2, #5
 8002560:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002564:	014b      	lsls	r3, r1, #5
 8002566:	4619      	mov	r1, r3
 8002568:	4622      	mov	r2, r4
 800256a:	1b49      	subs	r1, r1, r5
 800256c:	eb62 0206 	sbc.w	r2, r2, r6
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	f04f 0400 	mov.w	r4, #0
 8002578:	0194      	lsls	r4, r2, #6
 800257a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	1a5b      	subs	r3, r3, r1
 8002582:	eb64 0402 	sbc.w	r4, r4, r2
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	00e2      	lsls	r2, r4, #3
 8002590:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002594:	00d9      	lsls	r1, r3, #3
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	195b      	adds	r3, r3, r5
 800259c:	eb44 0406 	adc.w	r4, r4, r6
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	02a2      	lsls	r2, r4, #10
 80025aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025ae:	0299      	lsls	r1, r3, #10
 80025b0:	460b      	mov	r3, r1
 80025b2:	4614      	mov	r4, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	4621      	mov	r1, r4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	461a      	mov	r2, r3
 80025c0:	4623      	mov	r3, r4
 80025c2:	f7fd fe65 	bl	8000290 <__aeabi_uldivmod>
 80025c6:	4603      	mov	r3, r0
 80025c8:	460c      	mov	r4, r1
 80025ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	60bb      	str	r3, [r7, #8]
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ea:	60bb      	str	r3, [r7, #8]
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	68bb      	ldr	r3, [r7, #8]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	007a1200 	.word	0x007a1200

08002604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_GetHCLKFreq+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000028 	.word	0x20000028

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002620:	f7ff fff0 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002624:	4601      	mov	r1, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	08006bcc 	.word	0x08006bcc

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002648:	f7ff ffdc 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 800264c:	4601      	mov	r1, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0b5b      	lsrs	r3, r3, #13
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08006bcc 	.word	0x08006bcc

0800266c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e03f      	b.n	80026fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe ff58 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fb97 	bl	8002de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b088      	sub	sp, #32
 800270a:	af02      	add	r7, sp, #8
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	f040 8083 	bne.w	800282e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_UART_Transmit+0x2e>
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e07b      	b.n	8002830 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_UART_Transmit+0x40>
 8002742:	2302      	movs	r3, #2
 8002744:	e074      	b.n	8002830 <HAL_UART_Transmit+0x12a>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2221      	movs	r2, #33	; 0x21
 8002758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800275c:	f7ff f848 	bl	80017f0 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002776:	e042      	b.n	80027fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d122      	bne.n	80027d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2200      	movs	r2, #0
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f9b6 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e042      	b.n	8002830 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3302      	adds	r3, #2
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	e017      	b.n	80027fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e013      	b.n	80027fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f993 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e01f      	b.n	8002830 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1b7      	bne.n	8002778 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	2140      	movs	r1, #64	; 0x40
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f97a 	bl	8002b0c <UART_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e006      	b.n	8002830 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d140      	bne.n	80028d4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Receive_IT+0x26>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e039      	b.n	80028d6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_UART_Receive_IT+0x38>
 800286c:	2302      	movs	r3, #2
 800286e:	e032      	b.n	80028d6 <HAL_UART_Receive_IT+0x9e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2222      	movs	r2, #34	; 0x22
 8002894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0220 	orr.w	r2, r2, #32
 80028ce:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_UART_IRQHandler+0x52>
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9d6 	bl	8002ce0 <UART_Receive_IT>
      return;
 8002934:	e0d1      	b.n	8002ada <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80b0 	beq.w	8002a9e <HAL_UART_IRQHandler+0x1ba>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_UART_IRQHandler+0x70>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a5 	beq.w	8002a9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_UART_IRQHandler+0x90>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_UART_IRQHandler+0xb0>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_UART_IRQHandler+0xd0>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00f      	beq.n	80029de <HAL_UART_IRQHandler+0xfa>
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <HAL_UART_IRQHandler+0xee>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	f043 0208 	orr.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d078      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_UART_IRQHandler+0x11c>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f970 	bl	8002ce0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_UART_IRQHandler+0x144>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d031      	beq.n	8002a8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8b9 	bl	8002ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d123      	bne.n	8002a84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <HAL_UART_IRQHandler+0x1fc>)
 8002a5a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe ffe2 	bl	8001a2a <HAL_DMA_Abort_IT>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a76:	4610      	mov	r0, r2
 8002a78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7a:	e00e      	b.n	8002a9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f83b 	bl	8002af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a82:	e00a      	b.n	8002a9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f837 	bl	8002af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8a:	e006      	b.n	8002a9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f833 	bl	8002af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a98:	e01e      	b.n	8002ad8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9a:	bf00      	nop
    return;
 8002a9c:	e01c      	b.n	8002ad8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_UART_IRQHandler+0x1d6>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8a6 	bl	8002c04 <UART_Transmit_IT>
    return;
 8002ab8:	e00f      	b.n	8002ada <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_UART_IRQHandler+0x1f6>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8ee 	bl	8002cb0 <UART_EndTransmit_IT>
    return;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <HAL_UART_IRQHandler+0x1f6>
    return;
 8002ad8:	bf00      	nop
  }
}
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	08002bdd 	.word	0x08002bdd

08002ae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1c:	e02c      	b.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d028      	beq.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b2c:	f7fe fe60 	bl	80017f0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d21d      	bcs.n	8002b78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e00f      	b.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4013      	ands	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d0c3      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff ff7e 	bl	8002af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b21      	cmp	r3, #33	; 0x21
 8002c16:	d144      	bne.n	8002ca2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d11a      	bne.n	8002c58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	1c9a      	adds	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]
 8002c4a:	e00e      	b.n	8002c6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]
 8002c56:	e008      	b.n	8002c6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	1c59      	adds	r1, r3, #1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6211      	str	r1, [r2, #32]
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4619      	mov	r1, r3
 8002c78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff07 	bl	8002ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b22      	cmp	r3, #34	; 0x22
 8002cf2:	d171      	bne.n	8002dd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfc:	d123      	bne.n	8002d46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10e      	bne.n	8002d2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	1c9a      	adds	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
 8002d28:	e029      	b.n	8002d7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
 8002d44:	e01b      	b.n	8002d7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6858      	ldr	r0, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	1c59      	adds	r1, r3, #1
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6291      	str	r1, [r2, #40]	; 0x28
 8002d5e:	b2c2      	uxtb	r2, r0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e00c      	b.n	8002d7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	1c58      	adds	r0, r3, #1
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	6288      	str	r0, [r1, #40]	; 0x28
 8002d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d120      	bne.n	8002dd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0220 	bic.w	r2, r2, #32
 8002da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f9a2 	bl	8001114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e002      	b.n	8002dda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e26:	f023 030c 	bic.w	r3, r3, #12
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	f040 818b 	bne.w	800316c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4ac1      	ldr	r2, [pc, #772]	; (8003160 <UART_SetConfig+0x37c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d005      	beq.n	8002e6c <UART_SetConfig+0x88>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4abf      	ldr	r2, [pc, #764]	; (8003164 <UART_SetConfig+0x380>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f040 80bd 	bne.w	8002fe6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e6c:	f7ff fbea 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8002e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	461d      	mov	r5, r3
 8002e76:	f04f 0600 	mov.w	r6, #0
 8002e7a:	46a8      	mov	r8, r5
 8002e7c:	46b1      	mov	r9, r6
 8002e7e:	eb18 0308 	adds.w	r3, r8, r8
 8002e82:	eb49 0409 	adc.w	r4, r9, r9
 8002e86:	4698      	mov	r8, r3
 8002e88:	46a1      	mov	r9, r4
 8002e8a:	eb18 0805 	adds.w	r8, r8, r5
 8002e8e:	eb49 0906 	adc.w	r9, r9, r6
 8002e92:	f04f 0100 	mov.w	r1, #0
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ea6:	4688      	mov	r8, r1
 8002ea8:	4691      	mov	r9, r2
 8002eaa:	eb18 0005 	adds.w	r0, r8, r5
 8002eae:	eb49 0106 	adc.w	r1, r9, r6
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	461d      	mov	r5, r3
 8002eb8:	f04f 0600 	mov.w	r6, #0
 8002ebc:	196b      	adds	r3, r5, r5
 8002ebe:	eb46 0406 	adc.w	r4, r6, r6
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	f7fd f9e3 	bl	8000290 <__aeabi_uldivmod>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	460c      	mov	r4, r1
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4ba5      	ldr	r3, [pc, #660]	; (8003168 <UART_SetConfig+0x384>)
 8002ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f04f 0600 	mov.w	r6, #0
 8002ee4:	46a9      	mov	r9, r5
 8002ee6:	46b2      	mov	sl, r6
 8002ee8:	eb19 0309 	adds.w	r3, r9, r9
 8002eec:	eb4a 040a 	adc.w	r4, sl, sl
 8002ef0:	4699      	mov	r9, r3
 8002ef2:	46a2      	mov	sl, r4
 8002ef4:	eb19 0905 	adds.w	r9, r9, r5
 8002ef8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f10:	4689      	mov	r9, r1
 8002f12:	4692      	mov	sl, r2
 8002f14:	eb19 0005 	adds.w	r0, r9, r5
 8002f18:	eb4a 0106 	adc.w	r1, sl, r6
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	461d      	mov	r5, r3
 8002f22:	f04f 0600 	mov.w	r6, #0
 8002f26:	196b      	adds	r3, r5, r5
 8002f28:	eb46 0406 	adc.w	r4, r6, r6
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	f7fd f9ae 	bl	8000290 <__aeabi_uldivmod>
 8002f34:	4603      	mov	r3, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <UART_SetConfig+0x384>)
 8002f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	2164      	movs	r1, #100	; 0x64
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3332      	adds	r3, #50	; 0x32
 8002f4e:	4a86      	ldr	r2, [pc, #536]	; (8003168 <UART_SetConfig+0x384>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f5c:	4498      	add	r8, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	461d      	mov	r5, r3
 8002f62:	f04f 0600 	mov.w	r6, #0
 8002f66:	46a9      	mov	r9, r5
 8002f68:	46b2      	mov	sl, r6
 8002f6a:	eb19 0309 	adds.w	r3, r9, r9
 8002f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f72:	4699      	mov	r9, r3
 8002f74:	46a2      	mov	sl, r4
 8002f76:	eb19 0905 	adds.w	r9, r9, r5
 8002f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f92:	4689      	mov	r9, r1
 8002f94:	4692      	mov	sl, r2
 8002f96:	eb19 0005 	adds.w	r0, r9, r5
 8002f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	f04f 0600 	mov.w	r6, #0
 8002fa8:	196b      	adds	r3, r5, r5
 8002faa:	eb46 0406 	adc.w	r4, r6, r6
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	f7fd f96d 	bl	8000290 <__aeabi_uldivmod>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	460c      	mov	r4, r1
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <UART_SetConfig+0x384>)
 8002fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2164      	movs	r1, #100	; 0x64
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	3332      	adds	r3, #50	; 0x32
 8002fd0:	4a65      	ldr	r2, [pc, #404]	; (8003168 <UART_SetConfig+0x384>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 0207 	and.w	r2, r3, #7
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4442      	add	r2, r8
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e26f      	b.n	80034c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fe6:	f7ff fb19 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8002fea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	461d      	mov	r5, r3
 8002ff0:	f04f 0600 	mov.w	r6, #0
 8002ff4:	46a8      	mov	r8, r5
 8002ff6:	46b1      	mov	r9, r6
 8002ff8:	eb18 0308 	adds.w	r3, r8, r8
 8002ffc:	eb49 0409 	adc.w	r4, r9, r9
 8003000:	4698      	mov	r8, r3
 8003002:	46a1      	mov	r9, r4
 8003004:	eb18 0805 	adds.w	r8, r8, r5
 8003008:	eb49 0906 	adc.w	r9, r9, r6
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003018:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800301c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003020:	4688      	mov	r8, r1
 8003022:	4691      	mov	r9, r2
 8003024:	eb18 0005 	adds.w	r0, r8, r5
 8003028:	eb49 0106 	adc.w	r1, r9, r6
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	461d      	mov	r5, r3
 8003032:	f04f 0600 	mov.w	r6, #0
 8003036:	196b      	adds	r3, r5, r5
 8003038:	eb46 0406 	adc.w	r4, r6, r6
 800303c:	461a      	mov	r2, r3
 800303e:	4623      	mov	r3, r4
 8003040:	f7fd f926 	bl	8000290 <__aeabi_uldivmod>
 8003044:	4603      	mov	r3, r0
 8003046:	460c      	mov	r4, r1
 8003048:	461a      	mov	r2, r3
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <UART_SetConfig+0x384>)
 800304c:	fba3 2302 	umull	r2, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	461d      	mov	r5, r3
 800305a:	f04f 0600 	mov.w	r6, #0
 800305e:	46a9      	mov	r9, r5
 8003060:	46b2      	mov	sl, r6
 8003062:	eb19 0309 	adds.w	r3, r9, r9
 8003066:	eb4a 040a 	adc.w	r4, sl, sl
 800306a:	4699      	mov	r9, r3
 800306c:	46a2      	mov	sl, r4
 800306e:	eb19 0905 	adds.w	r9, r9, r5
 8003072:	eb4a 0a06 	adc.w	sl, sl, r6
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800308a:	4689      	mov	r9, r1
 800308c:	4692      	mov	sl, r2
 800308e:	eb19 0005 	adds.w	r0, r9, r5
 8003092:	eb4a 0106 	adc.w	r1, sl, r6
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	461d      	mov	r5, r3
 800309c:	f04f 0600 	mov.w	r6, #0
 80030a0:	196b      	adds	r3, r5, r5
 80030a2:	eb46 0406 	adc.w	r4, r6, r6
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	f7fd f8f1 	bl	8000290 <__aeabi_uldivmod>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <UART_SetConfig+0x384>)
 80030b6:	fba3 1302 	umull	r1, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2164      	movs	r1, #100	; 0x64
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <UART_SetConfig+0x384>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030d6:	4498      	add	r8, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	461d      	mov	r5, r3
 80030dc:	f04f 0600 	mov.w	r6, #0
 80030e0:	46a9      	mov	r9, r5
 80030e2:	46b2      	mov	sl, r6
 80030e4:	eb19 0309 	adds.w	r3, r9, r9
 80030e8:	eb4a 040a 	adc.w	r4, sl, sl
 80030ec:	4699      	mov	r9, r3
 80030ee:	46a2      	mov	sl, r4
 80030f0:	eb19 0905 	adds.w	r9, r9, r5
 80030f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310c:	4689      	mov	r9, r1
 800310e:	4692      	mov	sl, r2
 8003110:	eb19 0005 	adds.w	r0, r9, r5
 8003114:	eb4a 0106 	adc.w	r1, sl, r6
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	461d      	mov	r5, r3
 800311e:	f04f 0600 	mov.w	r6, #0
 8003122:	196b      	adds	r3, r5, r5
 8003124:	eb46 0406 	adc.w	r4, r6, r6
 8003128:	461a      	mov	r2, r3
 800312a:	4623      	mov	r3, r4
 800312c:	f7fd f8b0 	bl	8000290 <__aeabi_uldivmod>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	461a      	mov	r2, r3
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <UART_SetConfig+0x384>)
 8003138:	fba3 1302 	umull	r1, r3, r3, r2
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	2164      	movs	r1, #100	; 0x64
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3332      	adds	r3, #50	; 0x32
 800314a:	4a07      	ldr	r2, [pc, #28]	; (8003168 <UART_SetConfig+0x384>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	f003 0207 	and.w	r2, r3, #7
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4442      	add	r2, r8
 800315c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800315e:	e1b2      	b.n	80034c6 <UART_SetConfig+0x6e2>
 8003160:	40011000 	.word	0x40011000
 8003164:	40011400 	.word	0x40011400
 8003168:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4ad7      	ldr	r2, [pc, #860]	; (80034d0 <UART_SetConfig+0x6ec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d005      	beq.n	8003182 <UART_SetConfig+0x39e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4ad6      	ldr	r2, [pc, #856]	; (80034d4 <UART_SetConfig+0x6f0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f040 80d1 	bne.w	8003324 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003182:	f7ff fa5f 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	469a      	mov	sl, r3
 800318c:	f04f 0b00 	mov.w	fp, #0
 8003190:	46d0      	mov	r8, sl
 8003192:	46d9      	mov	r9, fp
 8003194:	eb18 0308 	adds.w	r3, r8, r8
 8003198:	eb49 0409 	adc.w	r4, r9, r9
 800319c:	4698      	mov	r8, r3
 800319e:	46a1      	mov	r9, r4
 80031a0:	eb18 080a 	adds.w	r8, r8, sl
 80031a4:	eb49 090b 	adc.w	r9, r9, fp
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031bc:	4688      	mov	r8, r1
 80031be:	4691      	mov	r9, r2
 80031c0:	eb1a 0508 	adds.w	r5, sl, r8
 80031c4:	eb4b 0609 	adc.w	r6, fp, r9
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	0094      	lsls	r4, r2, #2
 80031dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031e0:	008b      	lsls	r3, r1, #2
 80031e2:	461a      	mov	r2, r3
 80031e4:	4623      	mov	r3, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	4631      	mov	r1, r6
 80031ea:	f7fd f851 	bl	8000290 <__aeabi_uldivmod>
 80031ee:	4603      	mov	r3, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	461a      	mov	r2, r3
 80031f4:	4bb8      	ldr	r3, [pc, #736]	; (80034d8 <UART_SetConfig+0x6f4>)
 80031f6:	fba3 2302 	umull	r2, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	469b      	mov	fp, r3
 8003204:	f04f 0c00 	mov.w	ip, #0
 8003208:	46d9      	mov	r9, fp
 800320a:	46e2      	mov	sl, ip
 800320c:	eb19 0309 	adds.w	r3, r9, r9
 8003210:	eb4a 040a 	adc.w	r4, sl, sl
 8003214:	4699      	mov	r9, r3
 8003216:	46a2      	mov	sl, r4
 8003218:	eb19 090b 	adds.w	r9, r9, fp
 800321c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800322c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003234:	4689      	mov	r9, r1
 8003236:	4692      	mov	sl, r2
 8003238:	eb1b 0509 	adds.w	r5, fp, r9
 800323c:	eb4c 060a 	adc.w	r6, ip, sl
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4619      	mov	r1, r3
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	f04f 0400 	mov.w	r4, #0
 8003252:	0094      	lsls	r4, r2, #2
 8003254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003258:	008b      	lsls	r3, r1, #2
 800325a:	461a      	mov	r2, r3
 800325c:	4623      	mov	r3, r4
 800325e:	4628      	mov	r0, r5
 8003260:	4631      	mov	r1, r6
 8003262:	f7fd f815 	bl	8000290 <__aeabi_uldivmod>
 8003266:	4603      	mov	r3, r0
 8003268:	460c      	mov	r4, r1
 800326a:	461a      	mov	r2, r3
 800326c:	4b9a      	ldr	r3, [pc, #616]	; (80034d8 <UART_SetConfig+0x6f4>)
 800326e:	fba3 1302 	umull	r1, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2164      	movs	r1, #100	; 0x64
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a95      	ldr	r2, [pc, #596]	; (80034d8 <UART_SetConfig+0x6f4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328c:	4498      	add	r8, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	469b      	mov	fp, r3
 8003292:	f04f 0c00 	mov.w	ip, #0
 8003296:	46d9      	mov	r9, fp
 8003298:	46e2      	mov	sl, ip
 800329a:	eb19 0309 	adds.w	r3, r9, r9
 800329e:	eb4a 040a 	adc.w	r4, sl, sl
 80032a2:	4699      	mov	r9, r3
 80032a4:	46a2      	mov	sl, r4
 80032a6:	eb19 090b 	adds.w	r9, r9, fp
 80032aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032c2:	4689      	mov	r9, r1
 80032c4:	4692      	mov	sl, r2
 80032c6:	eb1b 0509 	adds.w	r5, fp, r9
 80032ca:	eb4c 060a 	adc.w	r6, ip, sl
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4619      	mov	r1, r3
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f04f 0400 	mov.w	r4, #0
 80032e0:	0094      	lsls	r4, r2, #2
 80032e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032e6:	008b      	lsls	r3, r1, #2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	4628      	mov	r0, r5
 80032ee:	4631      	mov	r1, r6
 80032f0:	f7fc ffce 	bl	8000290 <__aeabi_uldivmod>
 80032f4:	4603      	mov	r3, r0
 80032f6:	460c      	mov	r4, r1
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b77      	ldr	r3, [pc, #476]	; (80034d8 <UART_SetConfig+0x6f4>)
 80032fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	2164      	movs	r1, #100	; 0x64
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	3332      	adds	r3, #50	; 0x32
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <UART_SetConfig+0x6f4>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	f003 020f 	and.w	r2, r3, #15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4442      	add	r2, r8
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	e0d0      	b.n	80034c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7ff f97a 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8003328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	469a      	mov	sl, r3
 800332e:	f04f 0b00 	mov.w	fp, #0
 8003332:	46d0      	mov	r8, sl
 8003334:	46d9      	mov	r9, fp
 8003336:	eb18 0308 	adds.w	r3, r8, r8
 800333a:	eb49 0409 	adc.w	r4, r9, r9
 800333e:	4698      	mov	r8, r3
 8003340:	46a1      	mov	r9, r4
 8003342:	eb18 080a 	adds.w	r8, r8, sl
 8003346:	eb49 090b 	adc.w	r9, r9, fp
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800335a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800335e:	4688      	mov	r8, r1
 8003360:	4691      	mov	r9, r2
 8003362:	eb1a 0508 	adds.w	r5, sl, r8
 8003366:	eb4b 0609 	adc.w	r6, fp, r9
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	0094      	lsls	r4, r2, #2
 800337e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003382:	008b      	lsls	r3, r1, #2
 8003384:	461a      	mov	r2, r3
 8003386:	4623      	mov	r3, r4
 8003388:	4628      	mov	r0, r5
 800338a:	4631      	mov	r1, r6
 800338c:	f7fc ff80 	bl	8000290 <__aeabi_uldivmod>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	461a      	mov	r2, r3
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <UART_SetConfig+0x6f4>)
 8003398:	fba3 2302 	umull	r2, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	469b      	mov	fp, r3
 80033a6:	f04f 0c00 	mov.w	ip, #0
 80033aa:	46d9      	mov	r9, fp
 80033ac:	46e2      	mov	sl, ip
 80033ae:	eb19 0309 	adds.w	r3, r9, r9
 80033b2:	eb4a 040a 	adc.w	r4, sl, sl
 80033b6:	4699      	mov	r9, r3
 80033b8:	46a2      	mov	sl, r4
 80033ba:	eb19 090b 	adds.w	r9, r9, fp
 80033be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033d6:	4689      	mov	r9, r1
 80033d8:	4692      	mov	sl, r2
 80033da:	eb1b 0509 	adds.w	r5, fp, r9
 80033de:	eb4c 060a 	adc.w	r6, ip, sl
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4619      	mov	r1, r3
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f04f 0400 	mov.w	r4, #0
 80033f4:	0094      	lsls	r4, r2, #2
 80033f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033fa:	008b      	lsls	r3, r1, #2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	4628      	mov	r0, r5
 8003402:	4631      	mov	r1, r6
 8003404:	f7fc ff44 	bl	8000290 <__aeabi_uldivmod>
 8003408:	4603      	mov	r3, r0
 800340a:	460c      	mov	r4, r1
 800340c:	461a      	mov	r2, r3
 800340e:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <UART_SetConfig+0x6f4>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	2164      	movs	r1, #100	; 0x64
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	3332      	adds	r3, #50	; 0x32
 8003422:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <UART_SetConfig+0x6f4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342e:	4498      	add	r8, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	469b      	mov	fp, r3
 8003434:	f04f 0c00 	mov.w	ip, #0
 8003438:	46d9      	mov	r9, fp
 800343a:	46e2      	mov	sl, ip
 800343c:	eb19 0309 	adds.w	r3, r9, r9
 8003440:	eb4a 040a 	adc.w	r4, sl, sl
 8003444:	4699      	mov	r9, r3
 8003446:	46a2      	mov	sl, r4
 8003448:	eb19 090b 	adds.w	r9, r9, fp
 800344c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003464:	4689      	mov	r9, r1
 8003466:	4692      	mov	sl, r2
 8003468:	eb1b 0509 	adds.w	r5, fp, r9
 800346c:	eb4c 060a 	adc.w	r6, ip, sl
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	f04f 0400 	mov.w	r4, #0
 8003482:	0094      	lsls	r4, r2, #2
 8003484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003488:	008b      	lsls	r3, r1, #2
 800348a:	461a      	mov	r2, r3
 800348c:	4623      	mov	r3, r4
 800348e:	4628      	mov	r0, r5
 8003490:	4631      	mov	r1, r6
 8003492:	f7fc fefd 	bl	8000290 <__aeabi_uldivmod>
 8003496:	4603      	mov	r3, r0
 8003498:	460c      	mov	r4, r1
 800349a:	461a      	mov	r2, r3
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <UART_SetConfig+0x6f4>)
 800349e:	fba3 1302 	umull	r1, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2164      	movs	r1, #100	; 0x64
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <UART_SetConfig+0x6f4>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4442      	add	r2, r8
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	e7ff      	b.n	80034c6 <UART_SetConfig+0x6e2>
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	51eb851f 	.word	0x51eb851f

080034dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ee:	2b84      	cmp	r3, #132	; 0x84
 80034f0:	d005      	beq.n	80034fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	3303      	adds	r3, #3
 80034fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003512:	f3ef 8305 	mrs	r3, IPSR
 8003516:	607b      	str	r3, [r7, #4]
  return(result);
 8003518:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003534:	f001 f81c 	bl	8004570 <vTaskStartScheduler>
  
  return osOK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	bd80      	pop	{r7, pc}

0800353e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800353e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003540:	b089      	sub	sp, #36	; 0x24
 8003542:	af04      	add	r7, sp, #16
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <osThreadCreate+0x54>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01c      	beq.n	8003592 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685c      	ldr	r4, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681d      	ldr	r5, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691e      	ldr	r6, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ffb6 	bl	80034dc <makeFreeRtosPriority>
 8003570:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800357a:	9202      	str	r2, [sp, #8]
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	9100      	str	r1, [sp, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4632      	mov	r2, r6
 8003584:	4629      	mov	r1, r5
 8003586:	4620      	mov	r0, r4
 8003588:	f000 fe38 	bl	80041fc <xTaskCreateStatic>
 800358c:	4603      	mov	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e01c      	b.n	80035cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685c      	ldr	r4, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800359e:	b29e      	uxth	r6, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff98 	bl	80034dc <makeFreeRtosPriority>
 80035ac:	4602      	mov	r2, r0
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4632      	mov	r2, r6
 80035ba:	4629      	mov	r1, r5
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 fe76 	bl	80042ae <xTaskCreate>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d001      	beq.n	80035cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <osDelay+0x16>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	e000      	b.n	80035ee <osDelay+0x18>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 ff8a 	bl	8004508 <vTaskDelay>
  
  return osOK;
 80035f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	460b      	mov	r3, r1
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d013      	beq.n	800363e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003616:	7afb      	ldrb	r3, [r7, #11]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <osTimerCreate+0x20>
 800361c:	2101      	movs	r1, #1
 800361e:	e000      	b.n	8003622 <osTimerCreate+0x22>
 8003620:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800362a:	9201      	str	r2, [sp, #4]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	460a      	mov	r2, r1
 8003632:	2101      	movs	r1, #1
 8003634:	480b      	ldr	r0, [pc, #44]	; (8003664 <osTimerCreate+0x64>)
 8003636:	f001 fd4a 	bl	80050ce <xTimerCreateStatic>
 800363a:	4603      	mov	r3, r0
 800363c:	e00e      	b.n	800365c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <osTimerCreate+0x48>
 8003644:	2201      	movs	r2, #1
 8003646:	e000      	b.n	800364a <osTimerCreate+0x4a>
 8003648:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2101      	movs	r1, #1
 8003654:	4803      	ldr	r0, [pc, #12]	; (8003664 <osTimerCreate+0x64>)
 8003656:	f001 fd19 	bl	800508c <xTimerCreate>
 800365a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08006ba0 	.word	0x08006ba0

08003668 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <osTimerStart+0x20>
    ticks = 1;
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003688:	f7ff ff40 	bl	800350c <inHandlerMode>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01b      	beq.n	80036ca <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003692:	f107 020c 	add.w	r2, r7, #12
 8003696:	2300      	movs	r3, #0
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4613      	mov	r3, r2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	2109      	movs	r1, #9
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f001 fd81 	bl	80051a8 <xTimerGenericCommand>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d002      	beq.n	80036b2 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 80036ac:	23ff      	movs	r3, #255	; 0xff
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e018      	b.n	80036e4 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <osTimerStart+0x7c>
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <osTimerStart+0x88>)
 80036ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	e00c      	b.n	80036e4 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80036ca:	2300      	movs	r3, #0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	2104      	movs	r1, #4
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 fd67 	bl	80051a8 <xTimerGenericCommand>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <osTimerStart+0x7c>
      result = osErrorOS;
 80036e0:	23ff      	movs	r3, #255	; 0xff
 80036e2:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80036e4:	697b      	ldr	r3, [r7, #20]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f103 0208 	add.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f103 0208 	add.w	r2, r3, #8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f103 0208 	add.w	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d103      	bne.n	80037b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e00c      	b.n	80037d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3308      	adds	r3, #8
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e002      	b.n	80037c4 <vListInsert+0x2e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d2f6      	bcs.n	80037be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6852      	ldr	r2, [r2, #4]
 8003828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d103      	bne.n	800383c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	1e5a      	subs	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	e7fe      	b.n	8003882 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003884:	f002 f862 	bl	800594c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	441a      	add	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	3b01      	subs	r3, #1
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d114      	bne.n	8003904 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01a      	beq.n	8003918 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3310      	adds	r3, #16
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f8c4 	bl	8004a74 <xTaskRemoveFromEventList>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d012      	beq.n	8003918 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <xQueueGenericReset+0xcc>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	e009      	b.n	8003918 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3310      	adds	r3, #16
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fef3 	bl	80036f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3324      	adds	r3, #36	; 0x24
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff feee 	bl	80036f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003918:	f002 f846 	bl	80059a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800391c:	2301      	movs	r3, #1
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08e      	sub	sp, #56	; 0x38
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <xQueueGenericCreateStatic+0x28>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
 8003952:	e7fe      	b.n	8003952 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <xQueueGenericCreateStatic+0x42>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e7fe      	b.n	800396c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <xQueueGenericCreateStatic+0x4e>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <xQueueGenericCreateStatic+0x52>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <xQueueGenericCreateStatic+0x54>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <xQueueGenericCreateStatic+0x6c>
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	e7fe      	b.n	8003996 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <xQueueGenericCreateStatic+0x78>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <xQueueGenericCreateStatic+0x7c>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <xQueueGenericCreateStatic+0x7e>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <xQueueGenericCreateStatic+0x96>
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039c2:	2348      	movs	r3, #72	; 0x48
 80039c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b48      	cmp	r3, #72	; 0x48
 80039ca:	d009      	beq.n	80039e0 <xQueueGenericCreateStatic+0xb4>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e7fe      	b.n	80039de <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f805 	bl	8003a10 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3730      	adds	r7, #48	; 0x30
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a3e:	2101      	movs	r1, #1
 8003a40:	69b8      	ldr	r0, [r7, #24]
 8003a42:	f7ff ff0b 	bl	800385c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <xQueueGenericSend+0x30>
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7e:	e7fe      	b.n	8003a7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSend+0x3e>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSend+0x42>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericSend+0x44>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <xQueueGenericSend+0x5c>
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e7fe      	b.n	8003aaa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d103      	bne.n	8003aba <xQueueGenericSend+0x6a>
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <xQueueGenericSend+0x6e>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <xQueueGenericSend+0x70>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <xQueueGenericSend+0x88>
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	e7fe      	b.n	8003ad6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ad8:	f001 f988 	bl	8004dec <xTaskGetSchedulerState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <xQueueGenericSend+0x98>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <xQueueGenericSend+0x9c>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <xQueueGenericSend+0x9e>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <xQueueGenericSend+0xb6>
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b06:	f001 ff21 	bl	800594c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <xQueueGenericSend+0xcc>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d129      	bne.n	8003b70 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b22:	f000 f9ff 	bl	8003f24 <prvCopyDataToQueue>
 8003b26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d010      	beq.n	8003b52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	3324      	adds	r3, #36	; 0x24
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 ff9d 	bl	8004a74 <xTaskRemoveFromEventList>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <xQueueGenericSend+0x1f0>)
 8003b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	e00a      	b.n	8003b68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b58:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <xQueueGenericSend+0x1f0>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b68:	f001 ff1e 	bl	80059a8 <vPortExitCritical>
				return pdPASS;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e063      	b.n	8003c38 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b76:	f001 ff17 	bl	80059a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e05c      	b.n	8003c38 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 ffd5 	bl	8004b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b92:	f001 ff09 	bl	80059a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b96:	f000 fd4f 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b9a:	f001 fed7 	bl	800594c <vPortEnterCritical>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d103      	bne.n	8003bb4 <xQueueGenericSend+0x164>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d103      	bne.n	8003bca <xQueueGenericSend+0x17a>
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bca:	f001 feed 	bl	80059a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bce:	1d3a      	adds	r2, r7, #4
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 ffc4 	bl	8004b64 <xTaskCheckForTimeOut>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d124      	bne.n	8003c2c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be4:	f000 fa96 	bl	8004114 <prvIsQueueFull>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 feee 	bl	80049d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfe:	f000 fa21 	bl	8004044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c02:	f000 fd27 	bl	8004654 <xTaskResumeAll>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f af7c 	bne.w	8003b06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <xQueueGenericSend+0x1f0>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	e772      	b.n	8003b06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c22:	f000 fa0f 	bl	8004044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c26:	f000 fd15 	bl	8004654 <xTaskResumeAll>
 8003c2a:	e76c      	b.n	8003b06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c2e:	f000 fa09 	bl	8004044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c32:	f000 fd0f 	bl	8004654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
		}
	}
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3738      	adds	r7, #56	; 0x38
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <xQueueGenericSendFromISR+0x2c>
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <xQueueGenericSendFromISR+0x3a>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <xQueueGenericSendFromISR+0x3e>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <xQueueGenericSendFromISR+0x40>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <xQueueGenericSendFromISR+0x58>
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	e7fe      	b.n	8003c9a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d103      	bne.n	8003caa <xQueueGenericSendFromISR+0x66>
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <xQueueGenericSendFromISR+0x6a>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueGenericSendFromISR+0x6c>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <xQueueGenericSendFromISR+0x84>
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e7fe      	b.n	8003cc6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cc8:	f001 ff1c 	bl	8005b04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	61ba      	str	r2, [r7, #24]
 8003ce2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <xQueueGenericSendFromISR+0xb6>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d12c      	bne.n	8003d54 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d0a:	f000 f90b 	bl	8003f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d112      	bne.n	8003d3e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d016      	beq.n	8003d4e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	3324      	adds	r3, #36	; 0x24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fea5 	bl	8004a74 <xTaskRemoveFromEventList>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00e      	beq.n	8003d4e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e007      	b.n	8003d4e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d42:	3301      	adds	r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	b25a      	sxtb	r2, r3
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003d52:	e001      	b.n	8003d58 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3738      	adds	r7, #56	; 0x38
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <xQueueReceive+0x2e>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	623b      	str	r3, [r7, #32]
 8003d98:	e7fe      	b.n	8003d98 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <xQueueReceive+0x3c>
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueReceive+0x40>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <xQueueReceive+0x42>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <xQueueReceive+0x5a>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc6:	f001 f811 	bl	8004dec <xTaskGetSchedulerState>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <xQueueReceive+0x6a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <xQueueReceive+0x6e>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueReceive+0x70>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <xQueueReceive+0x88>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e7fe      	b.n	8003df2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df4:	f001 fdaa 	bl	800594c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01f      	beq.n	8003e44 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e08:	f000 f8f6 	bl	8003ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00f      	beq.n	8003e3c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	3310      	adds	r3, #16
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fe27 	bl	8004a74 <xTaskRemoveFromEventList>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d007      	beq.n	8003e3c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e2c:	4b3c      	ldr	r3, [pc, #240]	; (8003f20 <xQueueReceive+0x1b4>)
 8003e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e3c:	f001 fdb4 	bl	80059a8 <vPortExitCritical>
				return pdPASS;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e069      	b.n	8003f18 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e4a:	f001 fdad 	bl	80059a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e062      	b.n	8003f18 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fe6b 	bl	8004b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e62:	2301      	movs	r3, #1
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e66:	f001 fd9f 	bl	80059a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e6a:	f000 fbe5 	bl	8004638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e6e:	f001 fd6d 	bl	800594c <vPortEnterCritical>
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d103      	bne.n	8003e88 <xQueueReceive+0x11c>
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d103      	bne.n	8003e9e <xQueueReceive+0x132>
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9e:	f001 fd83 	bl	80059a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ea2:	1d3a      	adds	r2, r7, #4
 8003ea4:	f107 0310 	add.w	r3, r7, #16
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fe5a 	bl	8004b64 <xTaskCheckForTimeOut>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d123      	bne.n	8003efe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb8:	f000 f916 	bl	80040e8 <prvIsQueueEmpty>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d017      	beq.n	8003ef2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fd84 	bl	80049d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed2:	f000 f8b7 	bl	8004044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ed6:	f000 fbbd 	bl	8004654 <xTaskResumeAll>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d189      	bne.n	8003df4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <xQueueReceive+0x1b4>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	e780      	b.n	8003df4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f000 f8a6 	bl	8004044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef8:	f000 fbac 	bl	8004654 <xTaskResumeAll>
 8003efc:	e77a      	b.n	8003df4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f00:	f000 f8a0 	bl	8004044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f04:	f000 fba6 	bl	8004654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f0a:	f000 f8ed 	bl	80040e8 <prvIsQueueEmpty>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f43f af6f 	beq.w	8003df4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10d      	bne.n	8003f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d14d      	bne.n	8003fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 ff6a 	bl	8004e28 <xTaskPriorityDisinherit>
 8003f54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	e043      	b.n	8003fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d119      	bne.n	8003f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6898      	ldr	r0, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	f002 f80a 	bl	8005f88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	441a      	add	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d32b      	bcc.n	8003fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	e026      	b.n	8003fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68d8      	ldr	r0, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	f001 fff0 	bl	8005f88 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	425b      	negs	r3, r3
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d207      	bcs.n	8003fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	425b      	negs	r3, r3
 8003fce:	441a      	add	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d105      	bne.n	8003fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d303      	bcc.n	800402c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68d9      	ldr	r1, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	461a      	mov	r2, r3
 8004036:	6838      	ldr	r0, [r7, #0]
 8004038:	f001 ffa6 	bl	8005f88 <memcpy>
	}
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800404c:	f001 fc7e 	bl	800594c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004058:	e011      	b.n	800407e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d012      	beq.n	8004088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	; 0x24
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd04 	bl	8004a74 <xTaskRemoveFromEventList>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004072:	f000 fdd7 	bl	8004c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	3b01      	subs	r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800407e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	dce9      	bgt.n	800405a <prvUnlockQueue+0x16>
 8004086:	e000      	b.n	800408a <prvUnlockQueue+0x46>
					break;
 8004088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004092:	f001 fc89 	bl	80059a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004096:	f001 fc59 	bl	800594c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040a2:	e011      	b.n	80040c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d012      	beq.n	80040d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3310      	adds	r3, #16
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fcdf 	bl	8004a74 <xTaskRemoveFromEventList>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040bc:	f000 fdb2 	bl	8004c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040c0:	7bbb      	ldrb	r3, [r7, #14]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	dce9      	bgt.n	80040a4 <prvUnlockQueue+0x60>
 80040d0:	e000      	b.n	80040d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	22ff      	movs	r2, #255	; 0xff
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040dc:	f001 fc64 	bl	80059a8 <vPortExitCritical>
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f0:	f001 fc2c 	bl	800594c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e001      	b.n	8004106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004106:	f001 fc4f 	bl	80059a8 <vPortExitCritical>

	return xReturn;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800411c:	f001 fc16 	bl	800594c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	429a      	cmp	r2, r3
 800412a:	d102      	bne.n	8004132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e001      	b.n	8004136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004136:	f001 fc37 	bl	80059a8 <vPortExitCritical>

	return xReturn;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e014      	b.n	800417e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004154:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <vQueueAddToRegistry+0x4c>)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004160:	490b      	ldr	r1, [pc, #44]	; (8004190 <vQueueAddToRegistry+0x4c>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <vQueueAddToRegistry+0x4c>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004176:	e005      	b.n	8004184 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b07      	cmp	r3, #7
 8004182:	d9e7      	bls.n	8004154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	200052f8 	.word	0x200052f8

08004194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041a4:	f001 fbd2 	bl	800594c <vPortEnterCritical>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d103      	bne.n	80041be <vQueueWaitForMessageRestricted+0x2a>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c4:	b25b      	sxtb	r3, r3
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d103      	bne.n	80041d4 <vQueueWaitForMessageRestricted+0x40>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d4:	f001 fbe8 	bl	80059a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3324      	adds	r3, #36	; 0x24
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fc19 	bl	8004a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7ff ff28 	bl	8004044 <prvUnlockQueue>
	}
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08e      	sub	sp, #56	; 0x38
 8004200:	af04      	add	r7, sp, #16
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800420a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <xTaskCreateStatic+0x28>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	e7fe      	b.n	8004222 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <xTaskCreateStatic+0x42>
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e7fe      	b.n	800423c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800423e:	2354      	movs	r3, #84	; 0x54
 8004240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b54      	cmp	r3, #84	; 0x54
 8004246:	d009      	beq.n	800425c <xTaskCreateStatic+0x60>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e7fe      	b.n	800425a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01e      	beq.n	80042a0 <xTaskCreateStatic+0xa4>
 8004262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004270:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800427a:	2300      	movs	r3, #0
 800427c:	9303      	str	r3, [sp, #12]
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	9302      	str	r3, [sp, #8]
 8004282:	f107 0314 	add.w	r3, r7, #20
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f850 	bl	8004338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800429a:	f000 f8cb 	bl	8004434 <prvAddNewTaskToReadyList>
 800429e:	e001      	b.n	80042a4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042a4:	697b      	ldr	r3, [r7, #20]
	}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	; 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b08c      	sub	sp, #48	; 0x30
 80042b2:	af04      	add	r7, sp, #16
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 fc5c 	bl	8005b80 <pvPortMalloc>
 80042c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00e      	beq.n	80042ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80042d0:	2054      	movs	r0, #84	; 0x54
 80042d2:	f001 fc55 	bl	8005b80 <pvPortMalloc>
 80042d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
 80042e4:	e005      	b.n	80042f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042e6:	6978      	ldr	r0, [r7, #20]
 80042e8:	f001 fd0c 	bl	8005d04 <vPortFree>
 80042ec:	e001      	b.n	80042f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d017      	beq.n	8004328 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	2300      	movs	r3, #0
 8004304:	9303      	str	r3, [sp, #12]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f80e 	bl	8004338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800431c:	69f8      	ldr	r0, [r7, #28]
 800431e:	f000 f889 	bl	8004434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e002      	b.n	800432e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004328:	f04f 33ff 	mov.w	r3, #4294967295
 800432c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800432e:	69bb      	ldr	r3, [r7, #24]
	}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004350:	3b01      	subs	r3, #1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <prvInitialiseNewTask+0x46>
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	e7fe      	b.n	800437c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e012      	b.n	80043aa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	7819      	ldrb	r1, [r3, #0]
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	3334      	adds	r3, #52	; 0x34
 8004394:	460a      	mov	r2, r1
 8004396:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b0f      	cmp	r3, #15
 80043ae:	d9e9      	bls.n	8004384 <prvInitialiseNewTask+0x4c>
 80043b0:	e000      	b.n	80043b4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80043b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d901      	bls.n	80043c6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043c2:	2306      	movs	r3, #6
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2200      	movs	r2, #0
 80043d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff f9a9 	bl	8003734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	3318      	adds	r3, #24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff f9a4 	bl	8003734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	f1c3 0207 	rsb	r2, r3, #7
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004400:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2200      	movs	r2, #0
 8004406:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	69b8      	ldr	r0, [r7, #24]
 8004416:	f001 f96f 	bl	80056f8 <pxPortInitialiseStack>
 800441a:	4602      	mov	r2, r0
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800442c:	bf00      	nop
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800443c:	f001 fa86 	bl	800594c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004440:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <prvAddNewTaskToReadyList+0xb8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	4a29      	ldr	r2, [pc, #164]	; (80044ec <prvAddNewTaskToReadyList+0xb8>)
 8004448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800444a:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <prvAddNewTaskToReadyList+0xbc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004452:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <prvAddNewTaskToReadyList+0xbc>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <prvAddNewTaskToReadyList+0xb8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d110      	bne.n	8004482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004460:	f000 fc04 	bl	8004c6c <prvInitialiseTaskLists>
 8004464:	e00d      	b.n	8004482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <prvAddNewTaskToReadyList+0xc0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <prvAddNewTaskToReadyList+0xbc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	429a      	cmp	r2, r3
 800447a:	d802      	bhi.n	8004482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <prvAddNewTaskToReadyList+0xbc>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <prvAddNewTaskToReadyList+0xc4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <prvAddNewTaskToReadyList+0xc4>)
 800448a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	2201      	movs	r2, #1
 8004492:	409a      	lsls	r2, r3
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <prvAddNewTaskToReadyList+0xc8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <prvAddNewTaskToReadyList+0xc8>)
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <prvAddNewTaskToReadyList+0xcc>)
 80044ac:	441a      	add	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f7ff f94a 	bl	800374e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044ba:	f001 fa75 	bl	80059a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <prvAddNewTaskToReadyList+0xc0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <prvAddNewTaskToReadyList+0xbc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d207      	bcs.n	80044e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <prvAddNewTaskToReadyList+0xd0>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000a04 	.word	0x20000a04
 80044f0:	20000904 	.word	0x20000904
 80044f4:	20000a10 	.word	0x20000a10
 80044f8:	20000a20 	.word	0x20000a20
 80044fc:	20000a0c 	.word	0x20000a0c
 8004500:	20000908 	.word	0x20000908
 8004504:	e000ed04 	.word	0xe000ed04

08004508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <vTaskDelay+0x60>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <vTaskDelay+0x2e>
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	e7fe      	b.n	8004534 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004536:	f000 f87f 	bl	8004638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800453a:	2100      	movs	r1, #0
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fcf7 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004542:	f000 f887 	bl	8004654 <xTaskResumeAll>
 8004546:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <vTaskDelay+0x64>)
 8004550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000a2c 	.word	0x20000a2c
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800457e:	463a      	mov	r2, r7
 8004580:	1d39      	adds	r1, r7, #4
 8004582:	f107 0308 	add.w	r3, r7, #8
 8004586:	4618      	mov	r0, r3
 8004588:	f7fc f802 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	9202      	str	r2, [sp, #8]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2300      	movs	r3, #0
 800459c:	460a      	mov	r2, r1
 800459e:	4920      	ldr	r1, [pc, #128]	; (8004620 <vTaskStartScheduler+0xb0>)
 80045a0:	4820      	ldr	r0, [pc, #128]	; (8004624 <vTaskStartScheduler+0xb4>)
 80045a2:	f7ff fe2b 	bl	80041fc <xTaskCreateStatic>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <vTaskStartScheduler+0xb8>)
 80045aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <vTaskStartScheduler+0xb8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045b4:	2301      	movs	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e001      	b.n	80045be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d102      	bne.n	80045ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045c4:	f000 fd1a 	bl	8004ffc <xTimerCreateTimerTask>
 80045c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d115      	bne.n	80045fc <vTaskStartScheduler+0x8c>
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <vTaskStartScheduler+0xbc>)
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <vTaskStartScheduler+0xc0>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <vTaskStartScheduler+0xc4>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045f6:	f001 f90b 	bl	8005810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045fa:	e00d      	b.n	8004618 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d109      	bne.n	8004618 <vTaskStartScheduler+0xa8>
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e7fe      	b.n	8004616 <vTaskStartScheduler+0xa6>
}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	08006ba4 	.word	0x08006ba4
 8004624:	08004c3d 	.word	0x08004c3d
 8004628:	20000a28 	.word	0x20000a28
 800462c:	20000a24 	.word	0x20000a24
 8004630:	20000a10 	.word	0x20000a10
 8004634:	20000a08 	.word	0x20000a08

08004638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <vTaskSuspendAll+0x18>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	4a03      	ldr	r2, [pc, #12]	; (8004650 <vTaskSuspendAll+0x18>)
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	20000a2c 	.word	0x20000a2c

08004654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <xTaskResumeAll+0x114>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <xTaskResumeAll+0x2a>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	e7fe      	b.n	800467c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800467e:	f001 f965 	bl	800594c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <xTaskResumeAll+0x114>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3b01      	subs	r3, #1
 8004688:	4a37      	ldr	r2, [pc, #220]	; (8004768 <xTaskResumeAll+0x114>)
 800468a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <xTaskResumeAll+0x114>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d161      	bne.n	8004758 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <xTaskResumeAll+0x118>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05d      	beq.n	8004758 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800469c:	e02e      	b.n	80046fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800469e:	4b34      	ldr	r3, [pc, #208]	; (8004770 <xTaskResumeAll+0x11c>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3318      	adds	r3, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f8ac 	bl	8003808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff f8a7 	bl	8003808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	2201      	movs	r2, #1
 80046c0:	409a      	lsls	r2, r3
 80046c2:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <xTaskResumeAll+0x120>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <xTaskResumeAll+0x120>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <xTaskResumeAll+0x124>)
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7ff f833 	bl	800374e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <xTaskResumeAll+0x128>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <xTaskResumeAll+0x12c>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <xTaskResumeAll+0x11c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1cc      	bne.n	800469e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800470a:	f000 fb49 	bl	8004da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <xTaskResumeAll+0x130>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800471a:	f000 f847 	bl	80047ac <xTaskIncrementTick>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <xTaskResumeAll+0x12c>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f1      	bne.n	800471a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <xTaskResumeAll+0x130>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTaskResumeAll+0x12c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <xTaskResumeAll+0x134>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004758:	f001 f926 	bl	80059a8 <vPortExitCritical>

	return xAlreadyYielded;
 800475c:	68bb      	ldr	r3, [r7, #8]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000a2c 	.word	0x20000a2c
 800476c:	20000a04 	.word	0x20000a04
 8004770:	200009c4 	.word	0x200009c4
 8004774:	20000a0c 	.word	0x20000a0c
 8004778:	20000908 	.word	0x20000908
 800477c:	20000904 	.word	0x20000904
 8004780:	20000a18 	.word	0x20000a18
 8004784:	20000a14 	.word	0x20000a14
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <xTaskGetTickCount+0x1c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004798:	687b      	ldr	r3, [r7, #4]
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000a08 	.word	0x20000a08

080047ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b6:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <xTaskIncrementTick+0x14c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 808c 	bne.w	80048d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047c0:	4b4e      	ldr	r3, [pc, #312]	; (80048fc <xTaskIncrementTick+0x150>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047c8:	4a4c      	ldr	r2, [pc, #304]	; (80048fc <xTaskIncrementTick+0x150>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d11f      	bne.n	8004814 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80047d4:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <xTaskIncrementTick+0x154>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <xTaskIncrementTick+0x46>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	e7fe      	b.n	80047f0 <xTaskIncrementTick+0x44>
 80047f2:	4b43      	ldr	r3, [pc, #268]	; (8004900 <xTaskIncrementTick+0x154>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <xTaskIncrementTick+0x158>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a40      	ldr	r2, [pc, #256]	; (8004900 <xTaskIncrementTick+0x154>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4a40      	ldr	r2, [pc, #256]	; (8004904 <xTaskIncrementTick+0x158>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b40      	ldr	r3, [pc, #256]	; (8004908 <xTaskIncrementTick+0x15c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	4a3e      	ldr	r2, [pc, #248]	; (8004908 <xTaskIncrementTick+0x15c>)
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f000 fac6 	bl	8004da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004814:	4b3d      	ldr	r3, [pc, #244]	; (800490c <xTaskIncrementTick+0x160>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	d34d      	bcc.n	80048ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <xTaskIncrementTick+0x154>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <xTaskIncrementTick+0x80>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <xTaskIncrementTick+0x82>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004832:	4b36      	ldr	r3, [pc, #216]	; (800490c <xTaskIncrementTick+0x160>)
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	601a      	str	r2, [r3, #0]
					break;
 800483a:	e03e      	b.n	80048ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800483c:	4b30      	ldr	r3, [pc, #192]	; (8004900 <xTaskIncrementTick+0x154>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	429a      	cmp	r2, r3
 8004852:	d203      	bcs.n	800485c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004854:	4a2d      	ldr	r2, [pc, #180]	; (800490c <xTaskIncrementTick+0x160>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6013      	str	r3, [r2, #0]
						break;
 800485a:	e02e      	b.n	80048ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3304      	adds	r3, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe ffd1 	bl	8003808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3318      	adds	r3, #24
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe ffc8 	bl	8003808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	2201      	movs	r2, #1
 800487e:	409a      	lsls	r2, r3
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <xTaskIncrementTick+0x164>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	4a22      	ldr	r2, [pc, #136]	; (8004910 <xTaskIncrementTick+0x164>)
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <xTaskIncrementTick+0x168>)
 8004898:	441a      	add	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7fe ff54 	bl	800374e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <xTaskIncrementTick+0x16c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d3b4      	bcc.n	800481e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b8:	e7b1      	b.n	800481e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <xTaskIncrementTick+0x16c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4914      	ldr	r1, [pc, #80]	; (8004914 <xTaskIncrementTick+0x168>)
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d907      	bls.n	80048e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <xTaskIncrementTick+0x170>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3301      	adds	r3, #1
 80048de:	4a0f      	ldr	r2, [pc, #60]	; (800491c <xTaskIncrementTick+0x170>)
 80048e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <xTaskIncrementTick+0x174>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80048ea:	2301      	movs	r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80048ee:	697b      	ldr	r3, [r7, #20]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000a2c 	.word	0x20000a2c
 80048fc:	20000a08 	.word	0x20000a08
 8004900:	200009bc 	.word	0x200009bc
 8004904:	200009c0 	.word	0x200009c0
 8004908:	20000a1c 	.word	0x20000a1c
 800490c:	20000a24 	.word	0x20000a24
 8004910:	20000a0c 	.word	0x20000a0c
 8004914:	20000908 	.word	0x20000908
 8004918:	20000904 	.word	0x20000904
 800491c:	20000a14 	.word	0x20000a14
 8004920:	20000a18 	.word	0x20000a18

08004924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800492a:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <vTaskSwitchContext+0xa0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <vTaskSwitchContext+0xa4>)
 8004934:	2201      	movs	r2, #1
 8004936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004938:	e03e      	b.n	80049b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800493a:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <vTaskSwitchContext+0xa4>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <vTaskSwitchContext+0xa8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	f1c3 031f 	rsb	r3, r3, #31
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	491e      	ldr	r1, [pc, #120]	; (80049d0 <vTaskSwitchContext+0xac>)
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <vTaskSwitchContext+0x5a>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e7fe      	b.n	800497c <vTaskSwitchContext+0x58>
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <vTaskSwitchContext+0xac>)
 800498a:	4413      	add	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3308      	adds	r3, #8
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d104      	bne.n	80049ae <vTaskSwitchContext+0x8a>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <vTaskSwitchContext+0xb0>)
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	20000a2c 	.word	0x20000a2c
 80049c8:	20000a18 	.word	0x20000a18
 80049cc:	20000a0c 	.word	0x20000a0c
 80049d0:	20000908 	.word	0x20000908
 80049d4:	20000904 	.word	0x20000904

080049d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <vTaskPlaceOnEventList+0x24>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e7fe      	b.n	80049fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <vTaskPlaceOnEventList+0x44>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3318      	adds	r3, #24
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fe fec6 	bl	8003796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	6838      	ldr	r0, [r7, #0]
 8004a0e:	f000 fa8f 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000904 	.word	0x20000904

08004a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <vTaskPlaceOnEventListRestricted+0x26>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e7fe      	b.n	8004a44 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <vTaskPlaceOnEventListRestricted+0x50>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7fe fe7d 	bl	800374e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	68b8      	ldr	r0, [r7, #8]
 8004a64:	f000 fa64 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
	}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000904 	.word	0x20000904

08004a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <xTaskRemoveFromEventList+0x2a>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e7fe      	b.n	8004a9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe feb0 	bl	8003808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <xTaskRemoveFromEventList+0xac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d11c      	bne.n	8004aea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe fea7 	bl	8003808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	2201      	movs	r2, #1
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	4b18      	ldr	r3, [pc, #96]	; (8004b24 <xTaskRemoveFromEventList+0xb0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <xTaskRemoveFromEventList+0xb0>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <xTaskRemoveFromEventList+0xb4>)
 8004ada:	441a      	add	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7fe fe33 	bl	800374e <vListInsertEnd>
 8004ae8:	e005      	b.n	8004af6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3318      	adds	r3, #24
 8004aee:	4619      	mov	r1, r3
 8004af0:	480e      	ldr	r0, [pc, #56]	; (8004b2c <xTaskRemoveFromEventList+0xb8>)
 8004af2:	f7fe fe2c 	bl	800374e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <xTaskRemoveFromEventList+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d905      	bls.n	8004b10 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <xTaskRemoveFromEventList+0xc0>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e001      	b.n	8004b14 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b14:	697b      	ldr	r3, [r7, #20]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000a2c 	.word	0x20000a2c
 8004b24:	20000a0c 	.word	0x20000a0c
 8004b28:	20000908 	.word	0x20000908
 8004b2c:	200009c4 	.word	0x200009c4
 8004b30:	20000904 	.word	0x20000904
 8004b34:	20000a18 	.word	0x20000a18

08004b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <vTaskInternalSetTimeOutState+0x24>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <vTaskInternalSetTimeOutState+0x28>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	605a      	str	r2, [r3, #4]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	20000a1c 	.word	0x20000a1c
 8004b60:	20000a08 	.word	0x20000a08

08004b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <xTaskCheckForTimeOut+0x24>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e7fe      	b.n	8004b86 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <xTaskCheckForTimeOut+0x3e>
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e7fe      	b.n	8004ba0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004ba2:	f000 fed3 	bl	800594c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <xTaskCheckForTimeOut+0xb8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d102      	bne.n	8004bc6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e023      	b.n	8004c0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <xTaskCheckForTimeOut+0xbc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d007      	beq.n	8004be2 <xTaskCheckForTimeOut+0x7e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e015      	b.n	8004c0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d20b      	bcs.n	8004c04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff9d 	bl	8004b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e004      	b.n	8004c0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c0e:	f000 fecb 	bl	80059a8 <vPortExitCritical>

	return xReturn;
 8004c12:	69fb      	ldr	r3, [r7, #28]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000a08 	.word	0x20000a08
 8004c20:	20000a1c 	.word	0x20000a1c

08004c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <vTaskMissedYield+0x14>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	20000a18 	.word	0x20000a18

08004c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c44:	f000 f852 	bl	8004cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvIdleTask+0x28>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d9f9      	bls.n	8004c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <prvIdleTask+0x2c>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c60:	e7f0      	b.n	8004c44 <prvIdleTask+0x8>
 8004c62:	bf00      	nop
 8004c64:	20000908 	.word	0x20000908
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	e00c      	b.n	8004c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <prvInitialiseTaskLists+0x60>)
 8004c84:	4413      	add	r3, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fd34 	bl	80036f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b06      	cmp	r3, #6
 8004c96:	d9ef      	bls.n	8004c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c98:	480d      	ldr	r0, [pc, #52]	; (8004cd0 <prvInitialiseTaskLists+0x64>)
 8004c9a:	f7fe fd2b 	bl	80036f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c9e:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <prvInitialiseTaskLists+0x68>)
 8004ca0:	f7fe fd28 	bl	80036f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ca4:	480c      	ldr	r0, [pc, #48]	; (8004cd8 <prvInitialiseTaskLists+0x6c>)
 8004ca6:	f7fe fd25 	bl	80036f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004caa:	480c      	ldr	r0, [pc, #48]	; (8004cdc <prvInitialiseTaskLists+0x70>)
 8004cac:	f7fe fd22 	bl	80036f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cb0:	480b      	ldr	r0, [pc, #44]	; (8004ce0 <prvInitialiseTaskLists+0x74>)
 8004cb2:	f7fe fd1f 	bl	80036f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <prvInitialiseTaskLists+0x78>)
 8004cb8:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <prvInitialiseTaskLists+0x64>)
 8004cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <prvInitialiseTaskLists+0x7c>)
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <prvInitialiseTaskLists+0x68>)
 8004cc0:	601a      	str	r2, [r3, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000908 	.word	0x20000908
 8004cd0:	20000994 	.word	0x20000994
 8004cd4:	200009a8 	.word	0x200009a8
 8004cd8:	200009c4 	.word	0x200009c4
 8004cdc:	200009d8 	.word	0x200009d8
 8004ce0:	200009f0 	.word	0x200009f0
 8004ce4:	200009bc 	.word	0x200009bc
 8004ce8:	200009c0 	.word	0x200009c0

08004cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cf2:	e019      	b.n	8004d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cf4:	f000 fe2a 	bl	800594c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <prvCheckTasksWaitingTermination+0x4c>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fd7f 	bl	8003808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <prvCheckTasksWaitingTermination+0x50>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <prvCheckTasksWaitingTermination+0x50>)
 8004d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d1e:	f000 fe43 	bl	80059a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f80e 	bl	8004d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e1      	bne.n	8004cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	200009d8 	.word	0x200009d8
 8004d3c:	20000a04 	.word	0x20000a04
 8004d40:	200009ec 	.word	0x200009ec

08004d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 ffd2 	bl	8005d04 <vPortFree>
				vPortFree( pxTCB );
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 ffcf 	bl	8005d04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d66:	e017      	b.n	8004d98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d103      	bne.n	8004d7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 ffc6 	bl	8005d04 <vPortFree>
	}
 8004d78:	e00e      	b.n	8004d98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d009      	beq.n	8004d98 <prvDeleteTCB+0x54>
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e7fe      	b.n	8004d96 <prvDeleteTCB+0x52>
	}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <prvResetNextTaskUnblockTime+0x44>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <prvResetNextTaskUnblockTime+0x14>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <prvResetNextTaskUnblockTime+0x16>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvResetNextTaskUnblockTime+0x48>)
 8004dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dc2:	e008      	b.n	8004dd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <prvResetNextTaskUnblockTime+0x44>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <prvResetNextTaskUnblockTime+0x48>)
 8004dd4:	6013      	str	r3, [r2, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	200009bc 	.word	0x200009bc
 8004de8:	20000a24 	.word	0x20000a24

08004dec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <xTaskGetSchedulerState+0x34>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	e008      	b.n	8004e12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <xTaskGetSchedulerState+0x38>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	e001      	b.n	8004e12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e12:	687b      	ldr	r3, [r7, #4]
	}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000a10 	.word	0x20000a10
 8004e24:	20000a2c 	.word	0x20000a2c

08004e28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d06c      	beq.n	8004f18 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <xTaskPriorityDisinherit+0xfc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d009      	beq.n	8004e5c <xTaskPriorityDisinherit+0x34>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e7fe      	b.n	8004e5a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <xTaskPriorityDisinherit+0x50>
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	e7fe      	b.n	8004e76 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	1e5a      	subs	r2, r3, #1
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d044      	beq.n	8004f18 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d140      	bne.n	8004f18 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fcb4 	bl	8003808 <uxListRemove>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d115      	bne.n	8004ed2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	491f      	ldr	r1, [pc, #124]	; (8004f28 <xTaskPriorityDisinherit+0x100>)
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xTaskPriorityDisinherit+0xaa>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <xTaskPriorityDisinherit+0x104>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <xTaskPriorityDisinherit+0x104>)
 8004ed0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	f1c3 0207 	rsb	r2, r3, #7
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	2201      	movs	r2, #1
 8004eec:	409a      	lsls	r2, r3
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <xTaskPriorityDisinherit+0x104>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	4a0d      	ldr	r2, [pc, #52]	; (8004f2c <xTaskPriorityDisinherit+0x104>)
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <xTaskPriorityDisinherit+0x100>)
 8004f06:	441a      	add	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fe fc1d 	bl	800374e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f14:	2301      	movs	r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f18:	697b      	ldr	r3, [r7, #20]
	}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000904 	.word	0x20000904
 8004f28:	20000908 	.word	0x20000908
 8004f2c:	20000a0c 	.word	0x20000a0c

08004f30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f3a:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fc5e 	bl	8003808 <uxListRemove>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2201      	movs	r2, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4013      	ands	r3, r2
 8004f66:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d10a      	bne.n	8004f88 <prvAddCurrentTaskToDelayedList+0x58>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	481a      	ldr	r0, [pc, #104]	; (8004fec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f82:	f7fe fbe4 	bl	800374e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f86:	e026      	b.n	8004fd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d209      	bcs.n	8004fb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f7fe fbf2 	bl	8003796 <vListInsert>
}
 8004fb2:	e010      	b.n	8004fd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7fe fbe8 	bl	8003796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d202      	bcs.n	8004fd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000a08 	.word	0x20000a08
 8004fe4:	20000904 	.word	0x20000904
 8004fe8:	20000a0c 	.word	0x20000a0c
 8004fec:	200009f0 	.word	0x200009f0
 8004ff0:	200009c0 	.word	0x200009c0
 8004ff4:	200009bc 	.word	0x200009bc
 8004ff8:	20000a24 	.word	0x20000a24

08004ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005006:	f000 fb37 	bl	8005678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800500a:	4b1c      	ldr	r3, [pc, #112]	; (800507c <xTimerCreateTimerTask+0x80>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d021      	beq.n	8005056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800501a:	1d3a      	adds	r2, r7, #4
 800501c:	f107 0108 	add.w	r1, r7, #8
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb facd 	bl	80005c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	9202      	str	r2, [sp, #8]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	2302      	movs	r3, #2
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2300      	movs	r3, #0
 800503a:	460a      	mov	r2, r1
 800503c:	4910      	ldr	r1, [pc, #64]	; (8005080 <xTimerCreateTimerTask+0x84>)
 800503e:	4811      	ldr	r0, [pc, #68]	; (8005084 <xTimerCreateTimerTask+0x88>)
 8005040:	f7ff f8dc 	bl	80041fc <xTaskCreateStatic>
 8005044:	4602      	mov	r2, r0
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <xTimerCreateTimerTask+0x8c>)
 8005048:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800504a:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <xTimerCreateTimerTask+0x8c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005052:	2301      	movs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <xTimerCreateTimerTask+0x74>
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	e7fe      	b.n	800506e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005070:	697b      	ldr	r3, [r7, #20]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000a60 	.word	0x20000a60
 8005080:	08006bac 	.word	0x08006bac
 8005084:	080052c1 	.word	0x080052c1
 8005088:	20000a64 	.word	0x20000a64

0800508c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800509a:	202c      	movs	r0, #44	; 0x2c
 800509c:	f000 fd70 	bl	8005b80 <pvPortMalloc>
 80050a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f844 	bl	8005144 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80050c4:	697b      	ldr	r3, [r7, #20]
	}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b08a      	sub	sp, #40	; 0x28
 80050d2:	af02      	add	r7, sp, #8
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80050dc:	232c      	movs	r3, #44	; 0x2c
 80050de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b2c      	cmp	r3, #44	; 0x2c
 80050e4:	d009      	beq.n	80050fa <xTimerCreateStatic+0x2c>
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e7fe      	b.n	80050f8 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <xTimerCreateStatic+0x46>
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e7fe      	b.n	8005112 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00d      	beq.n	800513a <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f809 	bl	8005144 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800513a:	69fb      	ldr	r3, [r7, #28]
	}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <prvInitialiseNewTimer+0x28>
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e7fe      	b.n	800516a <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	d015      	beq.n	800519e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005172:	f000 fa81 	bl	8005678 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3304      	adds	r3, #4
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe facb 	bl	8003734 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d109      	bne.n	80051d4 <xTimerGenericCommand+0x2c>
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	623b      	str	r3, [r7, #32]
 80051d2:	e7fe      	b.n	80051d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <xTimerGenericCommand+0x94>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d02a      	beq.n	8005232 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	dc18      	bgt.n	8005220 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051ee:	f7ff fdfd 	bl	8004dec <xTaskGetSchedulerState>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d109      	bne.n	800520c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <xTimerGenericCommand+0x94>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	f107 0114 	add.w	r1, r7, #20
 8005200:	2300      	movs	r3, #0
 8005202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005204:	f7fe fc24 	bl	8003a50 <xQueueGenericSend>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24
 800520a:	e012      	b.n	8005232 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <xTimerGenericCommand+0x94>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	f107 0114 	add.w	r1, r7, #20
 8005214:	2300      	movs	r3, #0
 8005216:	2200      	movs	r2, #0
 8005218:	f7fe fc1a 	bl	8003a50 <xQueueGenericSend>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24
 800521e:	e008      	b.n	8005232 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <xTimerGenericCommand+0x94>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	f107 0114 	add.w	r1, r7, #20
 8005228:	2300      	movs	r3, #0
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	f7fe fd0a 	bl	8003c44 <xQueueGenericSendFromISR>
 8005230:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	; 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000a60 	.word	0x20000a60

08005240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800524a:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <prvProcessExpiredTimer+0x7c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	3304      	adds	r3, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fad5 	bl	8003808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d121      	bne.n	80052aa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	18d1      	adds	r1, r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	6978      	ldr	r0, [r7, #20]
 8005274:	f000 f8c8 	bl	8005408 <prvInsertTimerInActiveList>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800527e:	2300      	movs	r3, #0
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2300      	movs	r3, #0
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	2100      	movs	r1, #0
 8005288:	6978      	ldr	r0, [r7, #20]
 800528a:	f7ff ff8d 	bl	80051a8 <xTimerGenericCommand>
 800528e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <prvProcessExpiredTimer+0x6a>
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e7fe      	b.n	80052a8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	4798      	blx	r3
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000a58 	.word	0x20000a58

080052c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f857 	bl	8005380 <prvGetNextExpireTime>
 80052d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4619      	mov	r1, r3
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f803 	bl	80052e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052de:	f000 f8d5 	bl	800548c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e2:	e7f1      	b.n	80052c8 <prvTimerTask+0x8>

080052e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052ee:	f7ff f9a3 	bl	8004638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f2:	f107 0308 	add.w	r3, r7, #8
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f866 	bl	80053c8 <prvSampleTimeNow>
 80052fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d130      	bne.n	8005366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <prvProcessTimerOrBlockTask+0x3c>
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	429a      	cmp	r2, r3
 8005310:	d806      	bhi.n	8005320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005312:	f7ff f99f 	bl	8004654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff ff91 	bl	8005240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800531e:	e024      	b.n	800536a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <prvProcessTimerOrBlockTask+0x90>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <prvProcessTimerOrBlockTask+0x94>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	4619      	mov	r1, r3
 8005346:	f7fe ff25 	bl	8004194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800534a:	f7ff f983 	bl	8004654 <xTaskResumeAll>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <prvProcessTimerOrBlockTask+0x98>)
 8005356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	f3bf 8f6f 	isb	sy
}
 8005364:	e001      	b.n	800536a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005366:	f7ff f975 	bl	8004654 <xTaskResumeAll>
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000a5c 	.word	0x20000a5c
 8005378:	20000a60 	.word	0x20000a60
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <prvGetNextExpireTime+0x44>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <prvGetNextExpireTime+0x44>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e001      	b.n	80053b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053b6:	68fb      	ldr	r3, [r7, #12]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	20000a58 	.word	0x20000a58

080053c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d0:	f7ff f9dc 	bl	800478c <xTaskGetTickCount>
 80053d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <prvSampleTimeNow+0x3c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d205      	bcs.n	80053ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e0:	f000 f8ea 	bl	80055b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e002      	b.n	80053f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <prvSampleTimeNow+0x3c>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000a68 	.word	0x20000a68

08005408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d812      	bhi.n	8005454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad2      	subs	r2, r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e01b      	b.n	800547a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <prvInsertTimerInActiveList+0x7c>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f7fe f9a2 	bl	8003796 <vListInsert>
 8005452:	e012      	b.n	800547a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d206      	bcs.n	800546a <prvInsertTimerInActiveList+0x62>
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005464:	2301      	movs	r3, #1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e007      	b.n	800547a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <prvInsertTimerInActiveList+0x80>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7fe f98e 	bl	8003796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800547a:	697b      	ldr	r3, [r7, #20]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000a5c 	.word	0x20000a5c
 8005488:	20000a58 	.word	0x20000a58

0800548c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	; 0x30
 8005490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005492:	e07f      	b.n	8005594 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	db7b      	blt.n	8005592 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	3304      	adds	r3, #4
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe f9ac 	bl	8003808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff ff88 	bl	80053c8 <prvSampleTimeNow>
 80054b8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b09      	cmp	r3, #9
 80054be:	d869      	bhi.n	8005594 <prvProcessReceivedCommands+0x108>
 80054c0:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <prvProcessReceivedCommands+0x3c>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	080054f1 	.word	0x080054f1
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	080054f1 	.word	0x080054f1
 80054d4:	08005595 	.word	0x08005595
 80054d8:	0800554b 	.word	0x0800554b
 80054dc:	08005581 	.word	0x08005581
 80054e0:	080054f1 	.word	0x080054f1
 80054e4:	080054f1 	.word	0x080054f1
 80054e8:	08005595 	.word	0x08005595
 80054ec:	0800554b 	.word	0x0800554b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	18d1      	adds	r1, r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054fe:	f7ff ff83 	bl	8005408 <prvInsertTimerInActiveList>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d045      	beq.n	8005594 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d13d      	bne.n	8005594 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	441a      	add	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	2100      	movs	r1, #0
 8005528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800552a:	f7ff fe3d 	bl	80051a8 <xTimerGenericCommand>
 800552e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d12e      	bne.n	8005594 <prvProcessReceivedCommands+0x108>
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e7fe      	b.n	8005548 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <prvProcessReceivedCommands+0xe0>
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e7fe      	b.n	800556a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	18d1      	adds	r1, r2, r3
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800557a:	f7ff ff45 	bl	8005408 <prvInsertTimerInActiveList>
					break;
 800557e:	e009      	b.n	8005594 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d104      	bne.n	8005594 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800558a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558c:	f000 fbba 	bl	8005d04 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005590:	e000      	b.n	8005594 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005592:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <prvProcessReceivedCommands+0x128>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f107 0108 	add.w	r1, r7, #8
 800559c:	2200      	movs	r2, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fbe4 	bl	8003d6c <xQueueReceive>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f47f af74 	bne.w	8005494 <prvProcessReceivedCommands+0x8>
	}
}
 80055ac:	bf00      	nop
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000a60 	.word	0x20000a60

080055b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055be:	e044      	b.n	800564a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <prvSwitchTimerLists+0xb8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <prvSwitchTimerLists+0xb8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe f915 	bl	8003808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d12d      	bne.n	800564a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d90e      	bls.n	800561e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <prvSwitchTimerLists+0xb8>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f7fe f8bd 	bl	8003796 <vListInsert>
 800561c:	e015      	b.n	800564a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800561e:	2300      	movs	r3, #0
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	2300      	movs	r3, #0
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	2100      	movs	r1, #0
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff fdbd 	bl	80051a8 <xTimerGenericCommand>
 800562e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <prvSwitchTimerLists+0x92>
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	e7fe      	b.n	8005648 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <prvSwitchTimerLists+0xb8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1b5      	bne.n	80055c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <prvSwitchTimerLists+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <prvSwitchTimerLists+0xbc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a04      	ldr	r2, [pc, #16]	; (8005670 <prvSwitchTimerLists+0xb8>)
 8005660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005662:	4a04      	ldr	r2, [pc, #16]	; (8005674 <prvSwitchTimerLists+0xbc>)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	bf00      	nop
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000a58 	.word	0x20000a58
 8005674:	20000a5c 	.word	0x20000a5c

08005678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800567e:	f000 f965 	bl	800594c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <prvCheckForValidListAndQueue+0x60>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d120      	bne.n	80056cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800568a:	4814      	ldr	r0, [pc, #80]	; (80056dc <prvCheckForValidListAndQueue+0x64>)
 800568c:	f7fe f832 	bl	80036f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005690:	4813      	ldr	r0, [pc, #76]	; (80056e0 <prvCheckForValidListAndQueue+0x68>)
 8005692:	f7fe f82f 	bl	80036f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <prvCheckForValidListAndQueue+0x6c>)
 8005698:	4a10      	ldr	r2, [pc, #64]	; (80056dc <prvCheckForValidListAndQueue+0x64>)
 800569a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800569c:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <prvCheckForValidListAndQueue+0x70>)
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <prvCheckForValidListAndQueue+0x68>)
 80056a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056a2:	2300      	movs	r3, #0
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4b11      	ldr	r3, [pc, #68]	; (80056ec <prvCheckForValidListAndQueue+0x74>)
 80056a8:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <prvCheckForValidListAndQueue+0x78>)
 80056aa:	210c      	movs	r1, #12
 80056ac:	200a      	movs	r0, #10
 80056ae:	f7fe f93d 	bl	800392c <xQueueGenericCreateStatic>
 80056b2:	4602      	mov	r2, r0
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <prvCheckForValidListAndQueue+0x60>)
 80056b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <prvCheckForValidListAndQueue+0x60>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <prvCheckForValidListAndQueue+0x60>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	490b      	ldr	r1, [pc, #44]	; (80056f4 <prvCheckForValidListAndQueue+0x7c>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fd3c 	bl	8004144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056cc:	f000 f96c 	bl	80059a8 <vPortExitCritical>
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000a60 	.word	0x20000a60
 80056dc:	20000a30 	.word	0x20000a30
 80056e0:	20000a44 	.word	0x20000a44
 80056e4:	20000a58 	.word	0x20000a58
 80056e8:	20000a5c 	.word	0x20000a5c
 80056ec:	20000ae4 	.word	0x20000ae4
 80056f0:	20000a6c 	.word	0x20000a6c
 80056f4:	08006bb4 	.word	0x08006bb4

080056f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b04      	subs	r3, #4
 8005708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b04      	subs	r3, #4
 8005716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f023 0201 	bic.w	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b04      	subs	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005728:	4a0c      	ldr	r2, [pc, #48]	; (800575c <pxPortInitialiseStack+0x64>)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3b14      	subs	r3, #20
 8005732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b04      	subs	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f06f 0202 	mvn.w	r2, #2
 8005746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3b20      	subs	r3, #32
 800574c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	08005761 	.word	0x08005761

08005760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <prvTaskExitError+0x50>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d009      	beq.n	8005788 <prvTaskExitError+0x28>
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e7fe      	b.n	8005786 <prvTaskExitError+0x26>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800579a:	bf00      	nop
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0fc      	beq.n	800579c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000034 	.word	0x20000034
	...

080057c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <pxCurrentTCBConst2>)
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f380 8809 	msr	PSP, r0
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	4770      	bx	lr
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst2>:
 80057e0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057e8:	4808      	ldr	r0, [pc, #32]	; (800580c <prvPortStartFirstTask+0x24>)
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f380 8808 	msr	MSP, r0
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8814 	msr	CONTROL, r0
 80057fa:	b662      	cpsie	i
 80057fc:	b661      	cpsie	f
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	df00      	svc	0
 8005808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800580a:	bf00      	nop
 800580c:	e000ed08 	.word	0xe000ed08

08005810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005816:	4b44      	ldr	r3, [pc, #272]	; (8005928 <xPortStartScheduler+0x118>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a44      	ldr	r2, [pc, #272]	; (800592c <xPortStartScheduler+0x11c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d109      	bne.n	8005834 <xPortStartScheduler+0x24>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e7fe      	b.n	8005832 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005834:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <xPortStartScheduler+0x118>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a3d      	ldr	r2, [pc, #244]	; (8005930 <xPortStartScheduler+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d109      	bne.n	8005852 <xPortStartScheduler+0x42>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e7fe      	b.n	8005850 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005852:	4b38      	ldr	r3, [pc, #224]	; (8005934 <xPortStartScheduler+0x124>)
 8005854:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	22ff      	movs	r2, #255	; 0xff
 8005862:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005874:	b2da      	uxtb	r2, r3
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <xPortStartScheduler+0x128>)
 8005878:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800587a:	4b30      	ldr	r3, [pc, #192]	; (800593c <xPortStartScheduler+0x12c>)
 800587c:	2207      	movs	r2, #7
 800587e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005880:	e009      	b.n	8005896 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005882:	4b2e      	ldr	r3, [pc, #184]	; (800593c <xPortStartScheduler+0x12c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3b01      	subs	r3, #1
 8005888:	4a2c      	ldr	r2, [pc, #176]	; (800593c <xPortStartScheduler+0x12c>)
 800588a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d0ef      	beq.n	8005882 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058a2:	4b26      	ldr	r3, [pc, #152]	; (800593c <xPortStartScheduler+0x12c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f1c3 0307 	rsb	r3, r3, #7
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d009      	beq.n	80058c2 <xPortStartScheduler+0xb2>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	e7fe      	b.n	80058c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058c2:	4b1e      	ldr	r3, [pc, #120]	; (800593c <xPortStartScheduler+0x12c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <xPortStartScheduler+0x12c>)
 80058ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <xPortStartScheduler+0x12c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <xPortStartScheduler+0x12c>)
 80058d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <xPortStartScheduler+0x130>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <xPortStartScheduler+0x130>)
 80058e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058ec:	4b14      	ldr	r3, [pc, #80]	; (8005940 <xPortStartScheduler+0x130>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <xPortStartScheduler+0x130>)
 80058f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058f8:	f000 f8d6 	bl	8005aa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <xPortStartScheduler+0x134>)
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005902:	f000 f8f5 	bl	8005af0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <xPortStartScheduler+0x138>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0f      	ldr	r2, [pc, #60]	; (8005948 <xPortStartScheduler+0x138>)
 800590c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005910:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005912:	f7ff ff69 	bl	80057e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005916:	f7ff f805 	bl	8004924 <vTaskSwitchContext>
	prvTaskExitError();
 800591a:	f7ff ff21 	bl	8005760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	e000ed00 	.word	0xe000ed00
 800592c:	410fc271 	.word	0x410fc271
 8005930:	410fc270 	.word	0x410fc270
 8005934:	e000e400 	.word	0xe000e400
 8005938:	20000b2c 	.word	0x20000b2c
 800593c:	20000b30 	.word	0x20000b30
 8005940:	e000ed20 	.word	0xe000ed20
 8005944:	20000034 	.word	0x20000034
 8005948:	e000ef34 	.word	0xe000ef34

0800594c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <vPortEnterCritical+0x54>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	4a0d      	ldr	r2, [pc, #52]	; (80059a0 <vPortEnterCritical+0x54>)
 800596c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <vPortEnterCritical+0x54>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d10e      	bne.n	8005994 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <vPortEnterCritical+0x58>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <vPortEnterCritical+0x48>
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	e7fe      	b.n	8005992 <vPortEnterCritical+0x46>
	}
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000034 	.word	0x20000034
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <vPortExitCritical+0x4c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <vPortExitCritical+0x22>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	e7fe      	b.n	80059c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80059ca:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <vPortExitCritical+0x4c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <vPortExitCritical+0x4c>)
 80059d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <vPortExitCritical+0x4c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <vPortExitCritical+0x3e>
 80059dc:	2300      	movs	r3, #0
 80059de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000034 	.word	0x20000034
	...

08005a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a00:	f3ef 8009 	mrs	r0, PSP
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <pxCurrentTCBConst>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f01e 0f10 	tst.w	lr, #16
 8005a10:	bf08      	it	eq
 8005a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	6010      	str	r0, [r2, #0]
 8005a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a24:	f380 8811 	msr	BASEPRI, r0
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f7fe ff78 	bl	8004924 <vTaskSwitchContext>
 8005a34:	f04f 0000 	mov.w	r0, #0
 8005a38:	f380 8811 	msr	BASEPRI, r0
 8005a3c:	bc09      	pop	{r0, r3}
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	6808      	ldr	r0, [r1, #0]
 8005a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a46:	f01e 0f10 	tst.w	lr, #16
 8005a4a:	bf08      	it	eq
 8005a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a50:	f380 8809 	msr	PSP, r0
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	f3af 8000 	nop.w

08005a60 <pxCurrentTCBConst>:
 8005a60:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop

08005a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a80:	f7fe fe94 	bl	80047ac <xTaskIncrementTick>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <xPortSysTickHandler+0x3c>)
 8005a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <vPortSetupTimerInterrupt+0x34>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <vPortSetupTimerInterrupt+0x38>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <vPortSetupTimerInterrupt+0x3c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <vPortSetupTimerInterrupt+0x40>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	099b      	lsrs	r3, r3, #6
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <vPortSetupTimerInterrupt+0x44>)
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aca:	4b04      	ldr	r3, [pc, #16]	; (8005adc <vPortSetupTimerInterrupt+0x34>)
 8005acc:	2207      	movs	r2, #7
 8005ace:	601a      	str	r2, [r3, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000e010 	.word	0xe000e010
 8005ae0:	e000e018 	.word	0xe000e018
 8005ae4:	20000028 	.word	0x20000028
 8005ae8:	10624dd3 	.word	0x10624dd3
 8005aec:	e000e014 	.word	0xe000e014

08005af0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005af0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b00 <vPortEnableVFP+0x10>
 8005af4:	6801      	ldr	r1, [r0, #0]
 8005af6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005afa:	6001      	str	r1, [r0, #0]
 8005afc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005afe:	bf00      	nop
 8005b00:	e000ed88 	.word	0xe000ed88

08005b04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b0a:	f3ef 8305 	mrs	r3, IPSR
 8005b0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b0f      	cmp	r3, #15
 8005b14:	d913      	bls.n	8005b3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <vPortValidateInterruptPriority+0x6c>)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b20:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <vPortValidateInterruptPriority+0x70>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	7afa      	ldrb	r2, [r7, #11]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d209      	bcs.n	8005b3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	e7fe      	b.n	8005b3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <vPortValidateInterruptPriority+0x74>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b46:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <vPortValidateInterruptPriority+0x78>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d909      	bls.n	8005b62 <vPortValidateInterruptPriority+0x5e>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	e7fe      	b.n	8005b60 <vPortValidateInterruptPriority+0x5c>
	}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	e000e3f0 	.word	0xe000e3f0
 8005b74:	20000b2c 	.word	0x20000b2c
 8005b78:	e000ed0c 	.word	0xe000ed0c
 8005b7c:	20000b30 	.word	0x20000b30

08005b80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b8c:	f7fe fd54 	bl	8004638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b90:	4b57      	ldr	r3, [pc, #348]	; (8005cf0 <pvPortMalloc+0x170>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b98:	f000 f90c 	bl	8005db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b9c:	4b55      	ldr	r3, [pc, #340]	; (8005cf4 <pvPortMalloc+0x174>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f040 808c 	bne.w	8005cc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01c      	beq.n	8005bea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d013      	beq.n	8005bea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f023 0307 	bic.w	r3, r3, #7
 8005bc8:	3308      	adds	r3, #8
 8005bca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <pvPortMalloc+0x6a>
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e7fe      	b.n	8005be8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d068      	beq.n	8005cc2 <pvPortMalloc+0x142>
 8005bf0:	4b41      	ldr	r3, [pc, #260]	; (8005cf8 <pvPortMalloc+0x178>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d863      	bhi.n	8005cc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bfa:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <pvPortMalloc+0x17c>)
 8005bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bfe:	4b3f      	ldr	r3, [pc, #252]	; (8005cfc <pvPortMalloc+0x17c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c04:	e004      	b.n	8005c10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d903      	bls.n	8005c22 <pvPortMalloc+0xa2>
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f1      	bne.n	8005c06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c22:	4b33      	ldr	r3, [pc, #204]	; (8005cf0 <pvPortMalloc+0x170>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d04a      	beq.n	8005cc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2208      	movs	r2, #8
 8005c32:	4413      	add	r3, r2
 8005c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	1ad2      	subs	r2, r2, r3
 8005c46:	2308      	movs	r3, #8
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d91e      	bls.n	8005c8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <pvPortMalloc+0xf4>
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e7fe      	b.n	8005c72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	1ad2      	subs	r2, r2, r3
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c86:	69b8      	ldr	r0, [r7, #24]
 8005c88:	f000 f8f6 	bl	8005e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	; (8005cf8 <pvPortMalloc+0x178>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <pvPortMalloc+0x178>)
 8005c98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c9a:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <pvPortMalloc+0x178>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <pvPortMalloc+0x180>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d203      	bcs.n	8005cae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <pvPortMalloc+0x178>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <pvPortMalloc+0x180>)
 8005cac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <pvPortMalloc+0x174>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cc2:	f7fe fcc7 	bl	8004654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <pvPortMalloc+0x164>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e7fe      	b.n	8005ce2 <pvPortMalloc+0x162>
	return pvReturn;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3728      	adds	r7, #40	; 0x28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	2000473c 	.word	0x2000473c
 8005cf4:	20004748 	.word	0x20004748
 8005cf8:	20004740 	.word	0x20004740
 8005cfc:	20004734 	.word	0x20004734
 8005d00:	20004744 	.word	0x20004744

08005d04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d046      	beq.n	8005da4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d16:	2308      	movs	r3, #8
 8005d18:	425b      	negs	r3, r3
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	4b20      	ldr	r3, [pc, #128]	; (8005dac <vPortFree+0xa8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <vPortFree+0x42>
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e7fe      	b.n	8005d44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <vPortFree+0x5e>
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
 8005d60:	e7fe      	b.n	8005d60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <vPortFree+0xa8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d019      	beq.n	8005da4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d115      	bne.n	8005da4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <vPortFree+0xa8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d88:	f7fe fc56 	bl	8004638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <vPortFree+0xac>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <vPortFree+0xac>)
 8005d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f000 f86c 	bl	8005e78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005da0:	f7fe fc58 	bl	8004654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005da4:	bf00      	nop
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20004748 	.word	0x20004748
 8005db0:	20004740 	.word	0x20004740

08005db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dc0:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <prvHeapInit+0xac>)
 8005dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0307 	bic.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <prvHeapInit+0xac>)
 8005de4:	4413      	add	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dec:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <prvHeapInit+0xb0>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005df2:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <prvHeapInit+0xb0>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e00:	2208      	movs	r2, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <prvHeapInit+0xb4>)
 8005e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvHeapInit+0xb4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <prvHeapInit+0xb4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <prvHeapInit+0xb4>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <prvHeapInit+0xb8>)
 8005e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <prvHeapInit+0xbc>)
 8005e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <prvHeapInit+0xc0>)
 8005e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e52:	601a      	str	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000b34 	.word	0x20000b34
 8005e64:	20004734 	.word	0x20004734
 8005e68:	2000473c 	.word	0x2000473c
 8005e6c:	20004744 	.word	0x20004744
 8005e70:	20004740 	.word	0x20004740
 8005e74:	20004748 	.word	0x20004748

08005e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e80:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <prvInsertBlockIntoFreeList+0xac>)
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e002      	b.n	8005e8c <prvInsertBlockIntoFreeList+0x14>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d8f7      	bhi.n	8005e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d108      	bne.n	8005eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d118      	bne.n	8005f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d00d      	beq.n	8005ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e008      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e003      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d002      	beq.n	8005f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20004734 	.word	0x20004734
 8005f28:	2000473c 	.word	0x2000473c

08005f2c <atoi>:
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f000 b90e 	b.w	8006150 <strtol>

08005f34 <__errno>:
 8005f34:	4b01      	ldr	r3, [pc, #4]	; (8005f3c <__errno+0x8>)
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000038 	.word	0x20000038

08005f40 <__libc_init_array>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	4e0d      	ldr	r6, [pc, #52]	; (8005f78 <__libc_init_array+0x38>)
 8005f44:	4c0d      	ldr	r4, [pc, #52]	; (8005f7c <__libc_init_array+0x3c>)
 8005f46:	1ba4      	subs	r4, r4, r6
 8005f48:	10a4      	asrs	r4, r4, #2
 8005f4a:	2500      	movs	r5, #0
 8005f4c:	42a5      	cmp	r5, r4
 8005f4e:	d109      	bne.n	8005f64 <__libc_init_array+0x24>
 8005f50:	4e0b      	ldr	r6, [pc, #44]	; (8005f80 <__libc_init_array+0x40>)
 8005f52:	4c0c      	ldr	r4, [pc, #48]	; (8005f84 <__libc_init_array+0x44>)
 8005f54:	f000 fd18 	bl	8006988 <_init>
 8005f58:	1ba4      	subs	r4, r4, r6
 8005f5a:	10a4      	asrs	r4, r4, #2
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	42a5      	cmp	r5, r4
 8005f60:	d105      	bne.n	8005f6e <__libc_init_array+0x2e>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f68:	4798      	blx	r3
 8005f6a:	3501      	adds	r5, #1
 8005f6c:	e7ee      	b.n	8005f4c <__libc_init_array+0xc>
 8005f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f72:	4798      	blx	r3
 8005f74:	3501      	adds	r5, #1
 8005f76:	e7f2      	b.n	8005f5e <__libc_init_array+0x1e>
 8005f78:	08006d1c 	.word	0x08006d1c
 8005f7c:	08006d1c 	.word	0x08006d1c
 8005f80:	08006d1c 	.word	0x08006d1c
 8005f84:	08006d20 	.word	0x08006d20

08005f88 <memcpy>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	1e43      	subs	r3, r0, #1
 8005f8c:	440a      	add	r2, r1
 8005f8e:	4291      	cmp	r1, r2
 8005f90:	d100      	bne.n	8005f94 <memcpy+0xc>
 8005f92:	bd10      	pop	{r4, pc}
 8005f94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f9c:	e7f7      	b.n	8005f8e <memcpy+0x6>

08005f9e <memset>:
 8005f9e:	4402      	add	r2, r0
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d100      	bne.n	8005fa8 <memset+0xa>
 8005fa6:	4770      	bx	lr
 8005fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fac:	e7f9      	b.n	8005fa2 <memset+0x4>
	...

08005fb0 <rand>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <rand+0x50>)
 8005fb4:	681c      	ldr	r4, [r3, #0]
 8005fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fb8:	b97b      	cbnz	r3, 8005fda <rand+0x2a>
 8005fba:	2018      	movs	r0, #24
 8005fbc:	f000 f8e2 	bl	8006184 <malloc>
 8005fc0:	4a10      	ldr	r2, [pc, #64]	; (8006004 <rand+0x54>)
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <rand+0x58>)
 8005fc4:	63a0      	str	r0, [r4, #56]	; 0x38
 8005fc6:	e9c0 2300 	strd	r2, r3, [r0]
 8005fca:	4b10      	ldr	r3, [pc, #64]	; (800600c <rand+0x5c>)
 8005fcc:	6083      	str	r3, [r0, #8]
 8005fce:	230b      	movs	r3, #11
 8005fd0:	8183      	strh	r3, [r0, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005fda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <rand+0x60>)
 8005fde:	690a      	ldr	r2, [r1, #16]
 8005fe0:	694b      	ldr	r3, [r1, #20]
 8005fe2:	4c0c      	ldr	r4, [pc, #48]	; (8006014 <rand+0x64>)
 8005fe4:	4350      	muls	r0, r2
 8005fe6:	fb04 0003 	mla	r0, r4, r3, r0
 8005fea:	fba2 2304 	umull	r2, r3, r2, r4
 8005fee:	4403      	add	r3, r0
 8005ff0:	1c54      	adds	r4, r2, #1
 8005ff2:	f143 0500 	adc.w	r5, r3, #0
 8005ff6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8005ffa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000038 	.word	0x20000038
 8006004:	abcd330e 	.word	0xabcd330e
 8006008:	e66d1234 	.word	0xe66d1234
 800600c:	0005deec 	.word	0x0005deec
 8006010:	5851f42d 	.word	0x5851f42d
 8006014:	4c957f2d 	.word	0x4c957f2d

08006018 <siprintf>:
 8006018:	b40e      	push	{r1, r2, r3}
 800601a:	b500      	push	{lr}
 800601c:	b09c      	sub	sp, #112	; 0x70
 800601e:	ab1d      	add	r3, sp, #116	; 0x74
 8006020:	9002      	str	r0, [sp, #8]
 8006022:	9006      	str	r0, [sp, #24]
 8006024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006028:	4809      	ldr	r0, [pc, #36]	; (8006050 <siprintf+0x38>)
 800602a:	9107      	str	r1, [sp, #28]
 800602c:	9104      	str	r1, [sp, #16]
 800602e:	4909      	ldr	r1, [pc, #36]	; (8006054 <siprintf+0x3c>)
 8006030:	f853 2b04 	ldr.w	r2, [r3], #4
 8006034:	9105      	str	r1, [sp, #20]
 8006036:	6800      	ldr	r0, [r0, #0]
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	a902      	add	r1, sp, #8
 800603c:	f000 f9be 	bl	80063bc <_svfiprintf_r>
 8006040:	9b02      	ldr	r3, [sp, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	b01c      	add	sp, #112	; 0x70
 8006048:	f85d eb04 	ldr.w	lr, [sp], #4
 800604c:	b003      	add	sp, #12
 800604e:	4770      	bx	lr
 8006050:	20000038 	.word	0x20000038
 8006054:	ffff0208 	.word	0xffff0208

08006058 <_strtol_l.isra.0>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4680      	mov	r8, r0
 800605e:	4689      	mov	r9, r1
 8006060:	4692      	mov	sl, r2
 8006062:	461e      	mov	r6, r3
 8006064:	460f      	mov	r7, r1
 8006066:	463d      	mov	r5, r7
 8006068:	9808      	ldr	r0, [sp, #32]
 800606a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800606e:	f000 f885 	bl	800617c <__locale_ctype_ptr_l>
 8006072:	4420      	add	r0, r4
 8006074:	7843      	ldrb	r3, [r0, #1]
 8006076:	f013 0308 	ands.w	r3, r3, #8
 800607a:	d132      	bne.n	80060e2 <_strtol_l.isra.0+0x8a>
 800607c:	2c2d      	cmp	r4, #45	; 0x2d
 800607e:	d132      	bne.n	80060e6 <_strtol_l.isra.0+0x8e>
 8006080:	787c      	ldrb	r4, [r7, #1]
 8006082:	1cbd      	adds	r5, r7, #2
 8006084:	2201      	movs	r2, #1
 8006086:	2e00      	cmp	r6, #0
 8006088:	d05d      	beq.n	8006146 <_strtol_l.isra.0+0xee>
 800608a:	2e10      	cmp	r6, #16
 800608c:	d109      	bne.n	80060a2 <_strtol_l.isra.0+0x4a>
 800608e:	2c30      	cmp	r4, #48	; 0x30
 8006090:	d107      	bne.n	80060a2 <_strtol_l.isra.0+0x4a>
 8006092:	782b      	ldrb	r3, [r5, #0]
 8006094:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006098:	2b58      	cmp	r3, #88	; 0x58
 800609a:	d14f      	bne.n	800613c <_strtol_l.isra.0+0xe4>
 800609c:	786c      	ldrb	r4, [r5, #1]
 800609e:	2610      	movs	r6, #16
 80060a0:	3502      	adds	r5, #2
 80060a2:	2a00      	cmp	r2, #0
 80060a4:	bf14      	ite	ne
 80060a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80060aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80060ae:	2700      	movs	r7, #0
 80060b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80060b4:	4638      	mov	r0, r7
 80060b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80060ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80060be:	2b09      	cmp	r3, #9
 80060c0:	d817      	bhi.n	80060f2 <_strtol_l.isra.0+0x9a>
 80060c2:	461c      	mov	r4, r3
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	dd23      	ble.n	8006110 <_strtol_l.isra.0+0xb8>
 80060c8:	1c7b      	adds	r3, r7, #1
 80060ca:	d007      	beq.n	80060dc <_strtol_l.isra.0+0x84>
 80060cc:	4584      	cmp	ip, r0
 80060ce:	d31c      	bcc.n	800610a <_strtol_l.isra.0+0xb2>
 80060d0:	d101      	bne.n	80060d6 <_strtol_l.isra.0+0x7e>
 80060d2:	45a6      	cmp	lr, r4
 80060d4:	db19      	blt.n	800610a <_strtol_l.isra.0+0xb2>
 80060d6:	fb00 4006 	mla	r0, r0, r6, r4
 80060da:	2701      	movs	r7, #1
 80060dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060e0:	e7eb      	b.n	80060ba <_strtol_l.isra.0+0x62>
 80060e2:	462f      	mov	r7, r5
 80060e4:	e7bf      	b.n	8006066 <_strtol_l.isra.0+0xe>
 80060e6:	2c2b      	cmp	r4, #43	; 0x2b
 80060e8:	bf04      	itt	eq
 80060ea:	1cbd      	addeq	r5, r7, #2
 80060ec:	787c      	ldrbeq	r4, [r7, #1]
 80060ee:	461a      	mov	r2, r3
 80060f0:	e7c9      	b.n	8006086 <_strtol_l.isra.0+0x2e>
 80060f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80060f6:	2b19      	cmp	r3, #25
 80060f8:	d801      	bhi.n	80060fe <_strtol_l.isra.0+0xa6>
 80060fa:	3c37      	subs	r4, #55	; 0x37
 80060fc:	e7e2      	b.n	80060c4 <_strtol_l.isra.0+0x6c>
 80060fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006102:	2b19      	cmp	r3, #25
 8006104:	d804      	bhi.n	8006110 <_strtol_l.isra.0+0xb8>
 8006106:	3c57      	subs	r4, #87	; 0x57
 8006108:	e7dc      	b.n	80060c4 <_strtol_l.isra.0+0x6c>
 800610a:	f04f 37ff 	mov.w	r7, #4294967295
 800610e:	e7e5      	b.n	80060dc <_strtol_l.isra.0+0x84>
 8006110:	1c7b      	adds	r3, r7, #1
 8006112:	d108      	bne.n	8006126 <_strtol_l.isra.0+0xce>
 8006114:	2322      	movs	r3, #34	; 0x22
 8006116:	f8c8 3000 	str.w	r3, [r8]
 800611a:	4608      	mov	r0, r1
 800611c:	f1ba 0f00 	cmp.w	sl, #0
 8006120:	d107      	bne.n	8006132 <_strtol_l.isra.0+0xda>
 8006122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006126:	b102      	cbz	r2, 800612a <_strtol_l.isra.0+0xd2>
 8006128:	4240      	negs	r0, r0
 800612a:	f1ba 0f00 	cmp.w	sl, #0
 800612e:	d0f8      	beq.n	8006122 <_strtol_l.isra.0+0xca>
 8006130:	b10f      	cbz	r7, 8006136 <_strtol_l.isra.0+0xde>
 8006132:	f105 39ff 	add.w	r9, r5, #4294967295
 8006136:	f8ca 9000 	str.w	r9, [sl]
 800613a:	e7f2      	b.n	8006122 <_strtol_l.isra.0+0xca>
 800613c:	2430      	movs	r4, #48	; 0x30
 800613e:	2e00      	cmp	r6, #0
 8006140:	d1af      	bne.n	80060a2 <_strtol_l.isra.0+0x4a>
 8006142:	2608      	movs	r6, #8
 8006144:	e7ad      	b.n	80060a2 <_strtol_l.isra.0+0x4a>
 8006146:	2c30      	cmp	r4, #48	; 0x30
 8006148:	d0a3      	beq.n	8006092 <_strtol_l.isra.0+0x3a>
 800614a:	260a      	movs	r6, #10
 800614c:	e7a9      	b.n	80060a2 <_strtol_l.isra.0+0x4a>
	...

08006150 <strtol>:
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <strtol+0x24>)
 8006152:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006154:	681c      	ldr	r4, [r3, #0]
 8006156:	4d08      	ldr	r5, [pc, #32]	; (8006178 <strtol+0x28>)
 8006158:	6a23      	ldr	r3, [r4, #32]
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf08      	it	eq
 800615e:	462b      	moveq	r3, r5
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	460a      	mov	r2, r1
 8006166:	4601      	mov	r1, r0
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff ff75 	bl	8006058 <_strtol_l.isra.0>
 800616e:	b003      	add	sp, #12
 8006170:	bd30      	pop	{r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	20000038 	.word	0x20000038
 8006178:	2000009c 	.word	0x2000009c

0800617c <__locale_ctype_ptr_l>:
 800617c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006180:	4770      	bx	lr
	...

08006184 <malloc>:
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <malloc+0xc>)
 8006186:	4601      	mov	r1, r0
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f000 b863 	b.w	8006254 <_malloc_r>
 800618e:	bf00      	nop
 8006190:	20000038 	.word	0x20000038

08006194 <__ascii_mbtowc>:
 8006194:	b082      	sub	sp, #8
 8006196:	b901      	cbnz	r1, 800619a <__ascii_mbtowc+0x6>
 8006198:	a901      	add	r1, sp, #4
 800619a:	b142      	cbz	r2, 80061ae <__ascii_mbtowc+0x1a>
 800619c:	b14b      	cbz	r3, 80061b2 <__ascii_mbtowc+0x1e>
 800619e:	7813      	ldrb	r3, [r2, #0]
 80061a0:	600b      	str	r3, [r1, #0]
 80061a2:	7812      	ldrb	r2, [r2, #0]
 80061a4:	1c10      	adds	r0, r2, #0
 80061a6:	bf18      	it	ne
 80061a8:	2001      	movne	r0, #1
 80061aa:	b002      	add	sp, #8
 80061ac:	4770      	bx	lr
 80061ae:	4610      	mov	r0, r2
 80061b0:	e7fb      	b.n	80061aa <__ascii_mbtowc+0x16>
 80061b2:	f06f 0001 	mvn.w	r0, #1
 80061b6:	e7f8      	b.n	80061aa <__ascii_mbtowc+0x16>

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d045      	beq.n	800624c <_free_r+0x94>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 fbac 	bl	8006928 <__malloc_lock>
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <_free_r+0x98>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	4610      	mov	r0, r2
 80061d6:	b933      	cbnz	r3, 80061e6 <_free_r+0x2e>
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	6014      	str	r4, [r2, #0]
 80061dc:	4628      	mov	r0, r5
 80061de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e2:	f000 bba2 	b.w	800692a <__malloc_unlock>
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	d90c      	bls.n	8006204 <_free_r+0x4c>
 80061ea:	6821      	ldr	r1, [r4, #0]
 80061ec:	1862      	adds	r2, r4, r1
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bf04      	itt	eq
 80061f2:	681a      	ldreq	r2, [r3, #0]
 80061f4:	685b      	ldreq	r3, [r3, #4]
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	bf04      	itt	eq
 80061fa:	1852      	addeq	r2, r2, r1
 80061fc:	6022      	streq	r2, [r4, #0]
 80061fe:	6004      	str	r4, [r0, #0]
 8006200:	e7ec      	b.n	80061dc <_free_r+0x24>
 8006202:	4613      	mov	r3, r2
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	b10a      	cbz	r2, 800620c <_free_r+0x54>
 8006208:	42a2      	cmp	r2, r4
 800620a:	d9fa      	bls.n	8006202 <_free_r+0x4a>
 800620c:	6819      	ldr	r1, [r3, #0]
 800620e:	1858      	adds	r0, r3, r1
 8006210:	42a0      	cmp	r0, r4
 8006212:	d10b      	bne.n	800622c <_free_r+0x74>
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	4401      	add	r1, r0
 8006218:	1858      	adds	r0, r3, r1
 800621a:	4282      	cmp	r2, r0
 800621c:	6019      	str	r1, [r3, #0]
 800621e:	d1dd      	bne.n	80061dc <_free_r+0x24>
 8006220:	6810      	ldr	r0, [r2, #0]
 8006222:	6852      	ldr	r2, [r2, #4]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	4401      	add	r1, r0
 8006228:	6019      	str	r1, [r3, #0]
 800622a:	e7d7      	b.n	80061dc <_free_r+0x24>
 800622c:	d902      	bls.n	8006234 <_free_r+0x7c>
 800622e:	230c      	movs	r3, #12
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	e7d3      	b.n	80061dc <_free_r+0x24>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	1821      	adds	r1, r4, r0
 8006238:	428a      	cmp	r2, r1
 800623a:	bf04      	itt	eq
 800623c:	6811      	ldreq	r1, [r2, #0]
 800623e:	6852      	ldreq	r2, [r2, #4]
 8006240:	6062      	str	r2, [r4, #4]
 8006242:	bf04      	itt	eq
 8006244:	1809      	addeq	r1, r1, r0
 8006246:	6021      	streq	r1, [r4, #0]
 8006248:	605c      	str	r4, [r3, #4]
 800624a:	e7c7      	b.n	80061dc <_free_r+0x24>
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	bf00      	nop
 8006250:	2000474c 	.word	0x2000474c

08006254 <_malloc_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	1ccd      	adds	r5, r1, #3
 8006258:	f025 0503 	bic.w	r5, r5, #3
 800625c:	3508      	adds	r5, #8
 800625e:	2d0c      	cmp	r5, #12
 8006260:	bf38      	it	cc
 8006262:	250c      	movcc	r5, #12
 8006264:	2d00      	cmp	r5, #0
 8006266:	4606      	mov	r6, r0
 8006268:	db01      	blt.n	800626e <_malloc_r+0x1a>
 800626a:	42a9      	cmp	r1, r5
 800626c:	d903      	bls.n	8006276 <_malloc_r+0x22>
 800626e:	230c      	movs	r3, #12
 8006270:	6033      	str	r3, [r6, #0]
 8006272:	2000      	movs	r0, #0
 8006274:	bd70      	pop	{r4, r5, r6, pc}
 8006276:	f000 fb57 	bl	8006928 <__malloc_lock>
 800627a:	4a21      	ldr	r2, [pc, #132]	; (8006300 <_malloc_r+0xac>)
 800627c:	6814      	ldr	r4, [r2, #0]
 800627e:	4621      	mov	r1, r4
 8006280:	b991      	cbnz	r1, 80062a8 <_malloc_r+0x54>
 8006282:	4c20      	ldr	r4, [pc, #128]	; (8006304 <_malloc_r+0xb0>)
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	b91b      	cbnz	r3, 8006290 <_malloc_r+0x3c>
 8006288:	4630      	mov	r0, r6
 800628a:	f000 fb17 	bl	80068bc <_sbrk_r>
 800628e:	6020      	str	r0, [r4, #0]
 8006290:	4629      	mov	r1, r5
 8006292:	4630      	mov	r0, r6
 8006294:	f000 fb12 	bl	80068bc <_sbrk_r>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d124      	bne.n	80062e6 <_malloc_r+0x92>
 800629c:	230c      	movs	r3, #12
 800629e:	6033      	str	r3, [r6, #0]
 80062a0:	4630      	mov	r0, r6
 80062a2:	f000 fb42 	bl	800692a <__malloc_unlock>
 80062a6:	e7e4      	b.n	8006272 <_malloc_r+0x1e>
 80062a8:	680b      	ldr	r3, [r1, #0]
 80062aa:	1b5b      	subs	r3, r3, r5
 80062ac:	d418      	bmi.n	80062e0 <_malloc_r+0x8c>
 80062ae:	2b0b      	cmp	r3, #11
 80062b0:	d90f      	bls.n	80062d2 <_malloc_r+0x7e>
 80062b2:	600b      	str	r3, [r1, #0]
 80062b4:	50cd      	str	r5, [r1, r3]
 80062b6:	18cc      	adds	r4, r1, r3
 80062b8:	4630      	mov	r0, r6
 80062ba:	f000 fb36 	bl	800692a <__malloc_unlock>
 80062be:	f104 000b 	add.w	r0, r4, #11
 80062c2:	1d23      	adds	r3, r4, #4
 80062c4:	f020 0007 	bic.w	r0, r0, #7
 80062c8:	1ac3      	subs	r3, r0, r3
 80062ca:	d0d3      	beq.n	8006274 <_malloc_r+0x20>
 80062cc:	425a      	negs	r2, r3
 80062ce:	50e2      	str	r2, [r4, r3]
 80062d0:	e7d0      	b.n	8006274 <_malloc_r+0x20>
 80062d2:	428c      	cmp	r4, r1
 80062d4:	684b      	ldr	r3, [r1, #4]
 80062d6:	bf16      	itet	ne
 80062d8:	6063      	strne	r3, [r4, #4]
 80062da:	6013      	streq	r3, [r2, #0]
 80062dc:	460c      	movne	r4, r1
 80062de:	e7eb      	b.n	80062b8 <_malloc_r+0x64>
 80062e0:	460c      	mov	r4, r1
 80062e2:	6849      	ldr	r1, [r1, #4]
 80062e4:	e7cc      	b.n	8006280 <_malloc_r+0x2c>
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d005      	beq.n	80062fc <_malloc_r+0xa8>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4630      	mov	r0, r6
 80062f4:	f000 fae2 	bl	80068bc <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d0cf      	beq.n	800629c <_malloc_r+0x48>
 80062fc:	6025      	str	r5, [r4, #0]
 80062fe:	e7db      	b.n	80062b8 <_malloc_r+0x64>
 8006300:	2000474c 	.word	0x2000474c
 8006304:	20004750 	.word	0x20004750

08006308 <__ssputs_r>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	688e      	ldr	r6, [r1, #8]
 800630e:	429e      	cmp	r6, r3
 8006310:	4682      	mov	sl, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4690      	mov	r8, r2
 8006316:	4699      	mov	r9, r3
 8006318:	d837      	bhi.n	800638a <__ssputs_r+0x82>
 800631a:	898a      	ldrh	r2, [r1, #12]
 800631c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006320:	d031      	beq.n	8006386 <__ssputs_r+0x7e>
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	6909      	ldr	r1, [r1, #16]
 8006326:	1a6f      	subs	r7, r5, r1
 8006328:	6965      	ldr	r5, [r4, #20]
 800632a:	2302      	movs	r3, #2
 800632c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006330:	fb95 f5f3 	sdiv	r5, r5, r3
 8006334:	f109 0301 	add.w	r3, r9, #1
 8006338:	443b      	add	r3, r7
 800633a:	429d      	cmp	r5, r3
 800633c:	bf38      	it	cc
 800633e:	461d      	movcc	r5, r3
 8006340:	0553      	lsls	r3, r2, #21
 8006342:	d530      	bpl.n	80063a6 <__ssputs_r+0x9e>
 8006344:	4629      	mov	r1, r5
 8006346:	f7ff ff85 	bl	8006254 <_malloc_r>
 800634a:	4606      	mov	r6, r0
 800634c:	b950      	cbnz	r0, 8006364 <__ssputs_r+0x5c>
 800634e:	230c      	movs	r3, #12
 8006350:	f8ca 3000 	str.w	r3, [sl]
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006364:	463a      	mov	r2, r7
 8006366:	6921      	ldr	r1, [r4, #16]
 8006368:	f7ff fe0e 	bl	8005f88 <memcpy>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	6126      	str	r6, [r4, #16]
 800637a:	6165      	str	r5, [r4, #20]
 800637c:	443e      	add	r6, r7
 800637e:	1bed      	subs	r5, r5, r7
 8006380:	6026      	str	r6, [r4, #0]
 8006382:	60a5      	str	r5, [r4, #8]
 8006384:	464e      	mov	r6, r9
 8006386:	454e      	cmp	r6, r9
 8006388:	d900      	bls.n	800638c <__ssputs_r+0x84>
 800638a:	464e      	mov	r6, r9
 800638c:	4632      	mov	r2, r6
 800638e:	4641      	mov	r1, r8
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	f000 fab0 	bl	80068f6 <memmove>
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	1b9b      	subs	r3, r3, r6
 800639a:	60a3      	str	r3, [r4, #8]
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	441e      	add	r6, r3
 80063a0:	6026      	str	r6, [r4, #0]
 80063a2:	2000      	movs	r0, #0
 80063a4:	e7dc      	b.n	8006360 <__ssputs_r+0x58>
 80063a6:	462a      	mov	r2, r5
 80063a8:	f000 fac0 	bl	800692c <_realloc_r>
 80063ac:	4606      	mov	r6, r0
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d1e2      	bne.n	8006378 <__ssputs_r+0x70>
 80063b2:	6921      	ldr	r1, [r4, #16]
 80063b4:	4650      	mov	r0, sl
 80063b6:	f7ff feff 	bl	80061b8 <_free_r>
 80063ba:	e7c8      	b.n	800634e <__ssputs_r+0x46>

080063bc <_svfiprintf_r>:
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	461d      	mov	r5, r3
 80063c2:	898b      	ldrh	r3, [r1, #12]
 80063c4:	061f      	lsls	r7, r3, #24
 80063c6:	b09d      	sub	sp, #116	; 0x74
 80063c8:	4680      	mov	r8, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4616      	mov	r6, r2
 80063ce:	d50f      	bpl.n	80063f0 <_svfiprintf_r+0x34>
 80063d0:	690b      	ldr	r3, [r1, #16]
 80063d2:	b96b      	cbnz	r3, 80063f0 <_svfiprintf_r+0x34>
 80063d4:	2140      	movs	r1, #64	; 0x40
 80063d6:	f7ff ff3d 	bl	8006254 <_malloc_r>
 80063da:	6020      	str	r0, [r4, #0]
 80063dc:	6120      	str	r0, [r4, #16]
 80063de:	b928      	cbnz	r0, 80063ec <_svfiprintf_r+0x30>
 80063e0:	230c      	movs	r3, #12
 80063e2:	f8c8 3000 	str.w	r3, [r8]
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	e0c8      	b.n	800657e <_svfiprintf_r+0x1c2>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	6163      	str	r3, [r4, #20]
 80063f0:	2300      	movs	r3, #0
 80063f2:	9309      	str	r3, [sp, #36]	; 0x24
 80063f4:	2320      	movs	r3, #32
 80063f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063fa:	2330      	movs	r3, #48	; 0x30
 80063fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006400:	9503      	str	r5, [sp, #12]
 8006402:	f04f 0b01 	mov.w	fp, #1
 8006406:	4637      	mov	r7, r6
 8006408:	463d      	mov	r5, r7
 800640a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800640e:	b10b      	cbz	r3, 8006414 <_svfiprintf_r+0x58>
 8006410:	2b25      	cmp	r3, #37	; 0x25
 8006412:	d13e      	bne.n	8006492 <_svfiprintf_r+0xd6>
 8006414:	ebb7 0a06 	subs.w	sl, r7, r6
 8006418:	d00b      	beq.n	8006432 <_svfiprintf_r+0x76>
 800641a:	4653      	mov	r3, sl
 800641c:	4632      	mov	r2, r6
 800641e:	4621      	mov	r1, r4
 8006420:	4640      	mov	r0, r8
 8006422:	f7ff ff71 	bl	8006308 <__ssputs_r>
 8006426:	3001      	adds	r0, #1
 8006428:	f000 80a4 	beq.w	8006574 <_svfiprintf_r+0x1b8>
 800642c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642e:	4453      	add	r3, sl
 8006430:	9309      	str	r3, [sp, #36]	; 0x24
 8006432:	783b      	ldrb	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 809d 	beq.w	8006574 <_svfiprintf_r+0x1b8>
 800643a:	2300      	movs	r3, #0
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800644c:	931a      	str	r3, [sp, #104]	; 0x68
 800644e:	462f      	mov	r7, r5
 8006450:	2205      	movs	r2, #5
 8006452:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006456:	4850      	ldr	r0, [pc, #320]	; (8006598 <_svfiprintf_r+0x1dc>)
 8006458:	f7f9 feca 	bl	80001f0 <memchr>
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	b9d0      	cbnz	r0, 8006496 <_svfiprintf_r+0xda>
 8006460:	06d9      	lsls	r1, r3, #27
 8006462:	bf44      	itt	mi
 8006464:	2220      	movmi	r2, #32
 8006466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800646a:	071a      	lsls	r2, r3, #28
 800646c:	bf44      	itt	mi
 800646e:	222b      	movmi	r2, #43	; 0x2b
 8006470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006474:	782a      	ldrb	r2, [r5, #0]
 8006476:	2a2a      	cmp	r2, #42	; 0x2a
 8006478:	d015      	beq.n	80064a6 <_svfiprintf_r+0xea>
 800647a:	9a07      	ldr	r2, [sp, #28]
 800647c:	462f      	mov	r7, r5
 800647e:	2000      	movs	r0, #0
 8006480:	250a      	movs	r5, #10
 8006482:	4639      	mov	r1, r7
 8006484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006488:	3b30      	subs	r3, #48	; 0x30
 800648a:	2b09      	cmp	r3, #9
 800648c:	d94d      	bls.n	800652a <_svfiprintf_r+0x16e>
 800648e:	b1b8      	cbz	r0, 80064c0 <_svfiprintf_r+0x104>
 8006490:	e00f      	b.n	80064b2 <_svfiprintf_r+0xf6>
 8006492:	462f      	mov	r7, r5
 8006494:	e7b8      	b.n	8006408 <_svfiprintf_r+0x4c>
 8006496:	4a40      	ldr	r2, [pc, #256]	; (8006598 <_svfiprintf_r+0x1dc>)
 8006498:	1a80      	subs	r0, r0, r2
 800649a:	fa0b f000 	lsl.w	r0, fp, r0
 800649e:	4318      	orrs	r0, r3
 80064a0:	9004      	str	r0, [sp, #16]
 80064a2:	463d      	mov	r5, r7
 80064a4:	e7d3      	b.n	800644e <_svfiprintf_r+0x92>
 80064a6:	9a03      	ldr	r2, [sp, #12]
 80064a8:	1d11      	adds	r1, r2, #4
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	9103      	str	r1, [sp, #12]
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	db01      	blt.n	80064b6 <_svfiprintf_r+0xfa>
 80064b2:	9207      	str	r2, [sp, #28]
 80064b4:	e004      	b.n	80064c0 <_svfiprintf_r+0x104>
 80064b6:	4252      	negs	r2, r2
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	9207      	str	r2, [sp, #28]
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	783b      	ldrb	r3, [r7, #0]
 80064c2:	2b2e      	cmp	r3, #46	; 0x2e
 80064c4:	d10c      	bne.n	80064e0 <_svfiprintf_r+0x124>
 80064c6:	787b      	ldrb	r3, [r7, #1]
 80064c8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ca:	d133      	bne.n	8006534 <_svfiprintf_r+0x178>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	9203      	str	r2, [sp, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bfb8      	it	lt
 80064d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064dc:	3702      	adds	r7, #2
 80064de:	9305      	str	r3, [sp, #20]
 80064e0:	4d2e      	ldr	r5, [pc, #184]	; (800659c <_svfiprintf_r+0x1e0>)
 80064e2:	7839      	ldrb	r1, [r7, #0]
 80064e4:	2203      	movs	r2, #3
 80064e6:	4628      	mov	r0, r5
 80064e8:	f7f9 fe82 	bl	80001f0 <memchr>
 80064ec:	b138      	cbz	r0, 80064fe <_svfiprintf_r+0x142>
 80064ee:	2340      	movs	r3, #64	; 0x40
 80064f0:	1b40      	subs	r0, r0, r5
 80064f2:	fa03 f000 	lsl.w	r0, r3, r0
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	4303      	orrs	r3, r0
 80064fa:	3701      	adds	r7, #1
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	7839      	ldrb	r1, [r7, #0]
 8006500:	4827      	ldr	r0, [pc, #156]	; (80065a0 <_svfiprintf_r+0x1e4>)
 8006502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006506:	2206      	movs	r2, #6
 8006508:	1c7e      	adds	r6, r7, #1
 800650a:	f7f9 fe71 	bl	80001f0 <memchr>
 800650e:	2800      	cmp	r0, #0
 8006510:	d038      	beq.n	8006584 <_svfiprintf_r+0x1c8>
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <_svfiprintf_r+0x1e8>)
 8006514:	bb13      	cbnz	r3, 800655c <_svfiprintf_r+0x1a0>
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	3307      	adds	r3, #7
 800651a:	f023 0307 	bic.w	r3, r3, #7
 800651e:	3308      	adds	r3, #8
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006524:	444b      	add	r3, r9
 8006526:	9309      	str	r3, [sp, #36]	; 0x24
 8006528:	e76d      	b.n	8006406 <_svfiprintf_r+0x4a>
 800652a:	fb05 3202 	mla	r2, r5, r2, r3
 800652e:	2001      	movs	r0, #1
 8006530:	460f      	mov	r7, r1
 8006532:	e7a6      	b.n	8006482 <_svfiprintf_r+0xc6>
 8006534:	2300      	movs	r3, #0
 8006536:	3701      	adds	r7, #1
 8006538:	9305      	str	r3, [sp, #20]
 800653a:	4619      	mov	r1, r3
 800653c:	250a      	movs	r5, #10
 800653e:	4638      	mov	r0, r7
 8006540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006544:	3a30      	subs	r2, #48	; 0x30
 8006546:	2a09      	cmp	r2, #9
 8006548:	d903      	bls.n	8006552 <_svfiprintf_r+0x196>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0c8      	beq.n	80064e0 <_svfiprintf_r+0x124>
 800654e:	9105      	str	r1, [sp, #20]
 8006550:	e7c6      	b.n	80064e0 <_svfiprintf_r+0x124>
 8006552:	fb05 2101 	mla	r1, r5, r1, r2
 8006556:	2301      	movs	r3, #1
 8006558:	4607      	mov	r7, r0
 800655a:	e7f0      	b.n	800653e <_svfiprintf_r+0x182>
 800655c:	ab03      	add	r3, sp, #12
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	4622      	mov	r2, r4
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <_svfiprintf_r+0x1ec>)
 8006564:	a904      	add	r1, sp, #16
 8006566:	4640      	mov	r0, r8
 8006568:	f3af 8000 	nop.w
 800656c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006570:	4681      	mov	r9, r0
 8006572:	d1d6      	bne.n	8006522 <_svfiprintf_r+0x166>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	065b      	lsls	r3, r3, #25
 8006578:	f53f af35 	bmi.w	80063e6 <_svfiprintf_r+0x2a>
 800657c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800657e:	b01d      	add	sp, #116	; 0x74
 8006580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006584:	ab03      	add	r3, sp, #12
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4622      	mov	r2, r4
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <_svfiprintf_r+0x1ec>)
 800658c:	a904      	add	r1, sp, #16
 800658e:	4640      	mov	r0, r8
 8006590:	f000 f882 	bl	8006698 <_printf_i>
 8006594:	e7ea      	b.n	800656c <_svfiprintf_r+0x1b0>
 8006596:	bf00      	nop
 8006598:	08006bde 	.word	0x08006bde
 800659c:	08006be4 	.word	0x08006be4
 80065a0:	08006be8 	.word	0x08006be8
 80065a4:	00000000 	.word	0x00000000
 80065a8:	08006309 	.word	0x08006309

080065ac <_printf_common>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	4691      	mov	r9, r2
 80065b2:	461f      	mov	r7, r3
 80065b4:	688a      	ldr	r2, [r1, #8]
 80065b6:	690b      	ldr	r3, [r1, #16]
 80065b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065bc:	4293      	cmp	r3, r2
 80065be:	bfb8      	it	lt
 80065c0:	4613      	movlt	r3, r2
 80065c2:	f8c9 3000 	str.w	r3, [r9]
 80065c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	b112      	cbz	r2, 80065d6 <_printf_common+0x2a>
 80065d0:	3301      	adds	r3, #1
 80065d2:	f8c9 3000 	str.w	r3, [r9]
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	0699      	lsls	r1, r3, #26
 80065da:	bf42      	ittt	mi
 80065dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065e0:	3302      	addmi	r3, #2
 80065e2:	f8c9 3000 	strmi.w	r3, [r9]
 80065e6:	6825      	ldr	r5, [r4, #0]
 80065e8:	f015 0506 	ands.w	r5, r5, #6
 80065ec:	d107      	bne.n	80065fe <_printf_common+0x52>
 80065ee:	f104 0a19 	add.w	sl, r4, #25
 80065f2:	68e3      	ldr	r3, [r4, #12]
 80065f4:	f8d9 2000 	ldr.w	r2, [r9]
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	dc28      	bgt.n	8006650 <_printf_common+0xa4>
 80065fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	3300      	adds	r3, #0
 8006606:	bf18      	it	ne
 8006608:	2301      	movne	r3, #1
 800660a:	0692      	lsls	r2, r2, #26
 800660c:	d42d      	bmi.n	800666a <_printf_common+0xbe>
 800660e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006612:	4639      	mov	r1, r7
 8006614:	4630      	mov	r0, r6
 8006616:	47c0      	blx	r8
 8006618:	3001      	adds	r0, #1
 800661a:	d020      	beq.n	800665e <_printf_common+0xb2>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	68e5      	ldr	r5, [r4, #12]
 8006620:	f8d9 2000 	ldr.w	r2, [r9]
 8006624:	f003 0306 	and.w	r3, r3, #6
 8006628:	2b04      	cmp	r3, #4
 800662a:	bf08      	it	eq
 800662c:	1aad      	subeq	r5, r5, r2
 800662e:	68a3      	ldr	r3, [r4, #8]
 8006630:	6922      	ldr	r2, [r4, #16]
 8006632:	bf0c      	ite	eq
 8006634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006638:	2500      	movne	r5, #0
 800663a:	4293      	cmp	r3, r2
 800663c:	bfc4      	itt	gt
 800663e:	1a9b      	subgt	r3, r3, r2
 8006640:	18ed      	addgt	r5, r5, r3
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	341a      	adds	r4, #26
 8006648:	454d      	cmp	r5, r9
 800664a:	d11a      	bne.n	8006682 <_printf_common+0xd6>
 800664c:	2000      	movs	r0, #0
 800664e:	e008      	b.n	8006662 <_printf_common+0xb6>
 8006650:	2301      	movs	r3, #1
 8006652:	4652      	mov	r2, sl
 8006654:	4639      	mov	r1, r7
 8006656:	4630      	mov	r0, r6
 8006658:	47c0      	blx	r8
 800665a:	3001      	adds	r0, #1
 800665c:	d103      	bne.n	8006666 <_printf_common+0xba>
 800665e:	f04f 30ff 	mov.w	r0, #4294967295
 8006662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006666:	3501      	adds	r5, #1
 8006668:	e7c3      	b.n	80065f2 <_printf_common+0x46>
 800666a:	18e1      	adds	r1, r4, r3
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	2030      	movs	r0, #48	; 0x30
 8006670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006674:	4422      	add	r2, r4
 8006676:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800667a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800667e:	3302      	adds	r3, #2
 8006680:	e7c5      	b.n	800660e <_printf_common+0x62>
 8006682:	2301      	movs	r3, #1
 8006684:	4622      	mov	r2, r4
 8006686:	4639      	mov	r1, r7
 8006688:	4630      	mov	r0, r6
 800668a:	47c0      	blx	r8
 800668c:	3001      	adds	r0, #1
 800668e:	d0e6      	beq.n	800665e <_printf_common+0xb2>
 8006690:	f109 0901 	add.w	r9, r9, #1
 8006694:	e7d8      	b.n	8006648 <_printf_common+0x9c>
	...

08006698 <_printf_i>:
 8006698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800669c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80066a0:	460c      	mov	r4, r1
 80066a2:	7e09      	ldrb	r1, [r1, #24]
 80066a4:	b085      	sub	sp, #20
 80066a6:	296e      	cmp	r1, #110	; 0x6e
 80066a8:	4617      	mov	r7, r2
 80066aa:	4606      	mov	r6, r0
 80066ac:	4698      	mov	r8, r3
 80066ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066b0:	f000 80b3 	beq.w	800681a <_printf_i+0x182>
 80066b4:	d822      	bhi.n	80066fc <_printf_i+0x64>
 80066b6:	2963      	cmp	r1, #99	; 0x63
 80066b8:	d036      	beq.n	8006728 <_printf_i+0x90>
 80066ba:	d80a      	bhi.n	80066d2 <_printf_i+0x3a>
 80066bc:	2900      	cmp	r1, #0
 80066be:	f000 80b9 	beq.w	8006834 <_printf_i+0x19c>
 80066c2:	2958      	cmp	r1, #88	; 0x58
 80066c4:	f000 8083 	beq.w	80067ce <_printf_i+0x136>
 80066c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80066d0:	e032      	b.n	8006738 <_printf_i+0xa0>
 80066d2:	2964      	cmp	r1, #100	; 0x64
 80066d4:	d001      	beq.n	80066da <_printf_i+0x42>
 80066d6:	2969      	cmp	r1, #105	; 0x69
 80066d8:	d1f6      	bne.n	80066c8 <_printf_i+0x30>
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	6813      	ldr	r3, [r2, #0]
 80066de:	0605      	lsls	r5, r0, #24
 80066e0:	f103 0104 	add.w	r1, r3, #4
 80066e4:	d52a      	bpl.n	800673c <_printf_i+0xa4>
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6011      	str	r1, [r2, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da03      	bge.n	80066f6 <_printf_i+0x5e>
 80066ee:	222d      	movs	r2, #45	; 0x2d
 80066f0:	425b      	negs	r3, r3
 80066f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066f6:	486f      	ldr	r0, [pc, #444]	; (80068b4 <_printf_i+0x21c>)
 80066f8:	220a      	movs	r2, #10
 80066fa:	e039      	b.n	8006770 <_printf_i+0xd8>
 80066fc:	2973      	cmp	r1, #115	; 0x73
 80066fe:	f000 809d 	beq.w	800683c <_printf_i+0x1a4>
 8006702:	d808      	bhi.n	8006716 <_printf_i+0x7e>
 8006704:	296f      	cmp	r1, #111	; 0x6f
 8006706:	d020      	beq.n	800674a <_printf_i+0xb2>
 8006708:	2970      	cmp	r1, #112	; 0x70
 800670a:	d1dd      	bne.n	80066c8 <_printf_i+0x30>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	f043 0320 	orr.w	r3, r3, #32
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	e003      	b.n	800671e <_printf_i+0x86>
 8006716:	2975      	cmp	r1, #117	; 0x75
 8006718:	d017      	beq.n	800674a <_printf_i+0xb2>
 800671a:	2978      	cmp	r1, #120	; 0x78
 800671c:	d1d4      	bne.n	80066c8 <_printf_i+0x30>
 800671e:	2378      	movs	r3, #120	; 0x78
 8006720:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006724:	4864      	ldr	r0, [pc, #400]	; (80068b8 <_printf_i+0x220>)
 8006726:	e055      	b.n	80067d4 <_printf_i+0x13c>
 8006728:	6813      	ldr	r3, [r2, #0]
 800672a:	1d19      	adds	r1, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6011      	str	r1, [r2, #0]
 8006730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006738:	2301      	movs	r3, #1
 800673a:	e08c      	b.n	8006856 <_printf_i+0x1be>
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6011      	str	r1, [r2, #0]
 8006740:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006744:	bf18      	it	ne
 8006746:	b21b      	sxthne	r3, r3
 8006748:	e7cf      	b.n	80066ea <_printf_i+0x52>
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	6825      	ldr	r5, [r4, #0]
 800674e:	1d18      	adds	r0, r3, #4
 8006750:	6010      	str	r0, [r2, #0]
 8006752:	0628      	lsls	r0, r5, #24
 8006754:	d501      	bpl.n	800675a <_printf_i+0xc2>
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	e002      	b.n	8006760 <_printf_i+0xc8>
 800675a:	0668      	lsls	r0, r5, #25
 800675c:	d5fb      	bpl.n	8006756 <_printf_i+0xbe>
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	4854      	ldr	r0, [pc, #336]	; (80068b4 <_printf_i+0x21c>)
 8006762:	296f      	cmp	r1, #111	; 0x6f
 8006764:	bf14      	ite	ne
 8006766:	220a      	movne	r2, #10
 8006768:	2208      	moveq	r2, #8
 800676a:	2100      	movs	r1, #0
 800676c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006770:	6865      	ldr	r5, [r4, #4]
 8006772:	60a5      	str	r5, [r4, #8]
 8006774:	2d00      	cmp	r5, #0
 8006776:	f2c0 8095 	blt.w	80068a4 <_printf_i+0x20c>
 800677a:	6821      	ldr	r1, [r4, #0]
 800677c:	f021 0104 	bic.w	r1, r1, #4
 8006780:	6021      	str	r1, [r4, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d13d      	bne.n	8006802 <_printf_i+0x16a>
 8006786:	2d00      	cmp	r5, #0
 8006788:	f040 808e 	bne.w	80068a8 <_printf_i+0x210>
 800678c:	4665      	mov	r5, ip
 800678e:	2a08      	cmp	r2, #8
 8006790:	d10b      	bne.n	80067aa <_printf_i+0x112>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	07db      	lsls	r3, r3, #31
 8006796:	d508      	bpl.n	80067aa <_printf_i+0x112>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	6862      	ldr	r2, [r4, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	bfde      	ittt	le
 80067a0:	2330      	movle	r3, #48	; 0x30
 80067a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067aa:	ebac 0305 	sub.w	r3, ip, r5
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	f8cd 8000 	str.w	r8, [sp]
 80067b4:	463b      	mov	r3, r7
 80067b6:	aa03      	add	r2, sp, #12
 80067b8:	4621      	mov	r1, r4
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7ff fef6 	bl	80065ac <_printf_common>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d14d      	bne.n	8006860 <_printf_i+0x1c8>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	b005      	add	sp, #20
 80067ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067ce:	4839      	ldr	r0, [pc, #228]	; (80068b4 <_printf_i+0x21c>)
 80067d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80067d4:	6813      	ldr	r3, [r2, #0]
 80067d6:	6821      	ldr	r1, [r4, #0]
 80067d8:	1d1d      	adds	r5, r3, #4
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6015      	str	r5, [r2, #0]
 80067de:	060a      	lsls	r2, r1, #24
 80067e0:	d50b      	bpl.n	80067fa <_printf_i+0x162>
 80067e2:	07ca      	lsls	r2, r1, #31
 80067e4:	bf44      	itt	mi
 80067e6:	f041 0120 	orrmi.w	r1, r1, #32
 80067ea:	6021      	strmi	r1, [r4, #0]
 80067ec:	b91b      	cbnz	r3, 80067f6 <_printf_i+0x15e>
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	f022 0220 	bic.w	r2, r2, #32
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	2210      	movs	r2, #16
 80067f8:	e7b7      	b.n	800676a <_printf_i+0xd2>
 80067fa:	064d      	lsls	r5, r1, #25
 80067fc:	bf48      	it	mi
 80067fe:	b29b      	uxthmi	r3, r3
 8006800:	e7ef      	b.n	80067e2 <_printf_i+0x14a>
 8006802:	4665      	mov	r5, ip
 8006804:	fbb3 f1f2 	udiv	r1, r3, r2
 8006808:	fb02 3311 	mls	r3, r2, r1, r3
 800680c:	5cc3      	ldrb	r3, [r0, r3]
 800680e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006812:	460b      	mov	r3, r1
 8006814:	2900      	cmp	r1, #0
 8006816:	d1f5      	bne.n	8006804 <_printf_i+0x16c>
 8006818:	e7b9      	b.n	800678e <_printf_i+0xf6>
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	6825      	ldr	r5, [r4, #0]
 800681e:	6961      	ldr	r1, [r4, #20]
 8006820:	1d18      	adds	r0, r3, #4
 8006822:	6010      	str	r0, [r2, #0]
 8006824:	0628      	lsls	r0, r5, #24
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	d501      	bpl.n	800682e <_printf_i+0x196>
 800682a:	6019      	str	r1, [r3, #0]
 800682c:	e002      	b.n	8006834 <_printf_i+0x19c>
 800682e:	066a      	lsls	r2, r5, #25
 8006830:	d5fb      	bpl.n	800682a <_printf_i+0x192>
 8006832:	8019      	strh	r1, [r3, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	4665      	mov	r5, ip
 800683a:	e7b9      	b.n	80067b0 <_printf_i+0x118>
 800683c:	6813      	ldr	r3, [r2, #0]
 800683e:	1d19      	adds	r1, r3, #4
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	681d      	ldr	r5, [r3, #0]
 8006844:	6862      	ldr	r2, [r4, #4]
 8006846:	2100      	movs	r1, #0
 8006848:	4628      	mov	r0, r5
 800684a:	f7f9 fcd1 	bl	80001f0 <memchr>
 800684e:	b108      	cbz	r0, 8006854 <_printf_i+0x1bc>
 8006850:	1b40      	subs	r0, r0, r5
 8006852:	6060      	str	r0, [r4, #4]
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	6123      	str	r3, [r4, #16]
 8006858:	2300      	movs	r3, #0
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685e:	e7a7      	b.n	80067b0 <_printf_i+0x118>
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	462a      	mov	r2, r5
 8006864:	4639      	mov	r1, r7
 8006866:	4630      	mov	r0, r6
 8006868:	47c0      	blx	r8
 800686a:	3001      	adds	r0, #1
 800686c:	d0aa      	beq.n	80067c4 <_printf_i+0x12c>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	079b      	lsls	r3, r3, #30
 8006872:	d413      	bmi.n	800689c <_printf_i+0x204>
 8006874:	68e0      	ldr	r0, [r4, #12]
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	4298      	cmp	r0, r3
 800687a:	bfb8      	it	lt
 800687c:	4618      	movlt	r0, r3
 800687e:	e7a3      	b.n	80067c8 <_printf_i+0x130>
 8006880:	2301      	movs	r3, #1
 8006882:	464a      	mov	r2, r9
 8006884:	4639      	mov	r1, r7
 8006886:	4630      	mov	r0, r6
 8006888:	47c0      	blx	r8
 800688a:	3001      	adds	r0, #1
 800688c:	d09a      	beq.n	80067c4 <_printf_i+0x12c>
 800688e:	3501      	adds	r5, #1
 8006890:	68e3      	ldr	r3, [r4, #12]
 8006892:	9a03      	ldr	r2, [sp, #12]
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	42ab      	cmp	r3, r5
 8006898:	dcf2      	bgt.n	8006880 <_printf_i+0x1e8>
 800689a:	e7eb      	b.n	8006874 <_printf_i+0x1dc>
 800689c:	2500      	movs	r5, #0
 800689e:	f104 0919 	add.w	r9, r4, #25
 80068a2:	e7f5      	b.n	8006890 <_printf_i+0x1f8>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1ac      	bne.n	8006802 <_printf_i+0x16a>
 80068a8:	7803      	ldrb	r3, [r0, #0]
 80068aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068b2:	e76c      	b.n	800678e <_printf_i+0xf6>
 80068b4:	08006bef 	.word	0x08006bef
 80068b8:	08006c00 	.word	0x08006c00

080068bc <_sbrk_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4c06      	ldr	r4, [pc, #24]	; (80068d8 <_sbrk_r+0x1c>)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4605      	mov	r5, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	f7fa fec0 	bl	800164c <_sbrk>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_sbrk_r+0x1a>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_sbrk_r+0x1a>
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20005338 	.word	0x20005338

080068dc <__ascii_wctomb>:
 80068dc:	b149      	cbz	r1, 80068f2 <__ascii_wctomb+0x16>
 80068de:	2aff      	cmp	r2, #255	; 0xff
 80068e0:	bf85      	ittet	hi
 80068e2:	238a      	movhi	r3, #138	; 0x8a
 80068e4:	6003      	strhi	r3, [r0, #0]
 80068e6:	700a      	strbls	r2, [r1, #0]
 80068e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80068ec:	bf98      	it	ls
 80068ee:	2001      	movls	r0, #1
 80068f0:	4770      	bx	lr
 80068f2:	4608      	mov	r0, r1
 80068f4:	4770      	bx	lr

080068f6 <memmove>:
 80068f6:	4288      	cmp	r0, r1
 80068f8:	b510      	push	{r4, lr}
 80068fa:	eb01 0302 	add.w	r3, r1, r2
 80068fe:	d807      	bhi.n	8006910 <memmove+0x1a>
 8006900:	1e42      	subs	r2, r0, #1
 8006902:	4299      	cmp	r1, r3
 8006904:	d00a      	beq.n	800691c <memmove+0x26>
 8006906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800690a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800690e:	e7f8      	b.n	8006902 <memmove+0xc>
 8006910:	4283      	cmp	r3, r0
 8006912:	d9f5      	bls.n	8006900 <memmove+0xa>
 8006914:	1881      	adds	r1, r0, r2
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	42d3      	cmn	r3, r2
 800691a:	d100      	bne.n	800691e <memmove+0x28>
 800691c:	bd10      	pop	{r4, pc}
 800691e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006922:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006926:	e7f7      	b.n	8006918 <memmove+0x22>

08006928 <__malloc_lock>:
 8006928:	4770      	bx	lr

0800692a <__malloc_unlock>:
 800692a:	4770      	bx	lr

0800692c <_realloc_r>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	4607      	mov	r7, r0
 8006930:	4614      	mov	r4, r2
 8006932:	460e      	mov	r6, r1
 8006934:	b921      	cbnz	r1, 8006940 <_realloc_r+0x14>
 8006936:	4611      	mov	r1, r2
 8006938:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800693c:	f7ff bc8a 	b.w	8006254 <_malloc_r>
 8006940:	b922      	cbnz	r2, 800694c <_realloc_r+0x20>
 8006942:	f7ff fc39 	bl	80061b8 <_free_r>
 8006946:	4625      	mov	r5, r4
 8006948:	4628      	mov	r0, r5
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	f000 f814 	bl	8006978 <_malloc_usable_size_r>
 8006950:	42a0      	cmp	r0, r4
 8006952:	d20f      	bcs.n	8006974 <_realloc_r+0x48>
 8006954:	4621      	mov	r1, r4
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff fc7c 	bl	8006254 <_malloc_r>
 800695c:	4605      	mov	r5, r0
 800695e:	2800      	cmp	r0, #0
 8006960:	d0f2      	beq.n	8006948 <_realloc_r+0x1c>
 8006962:	4631      	mov	r1, r6
 8006964:	4622      	mov	r2, r4
 8006966:	f7ff fb0f 	bl	8005f88 <memcpy>
 800696a:	4631      	mov	r1, r6
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff fc23 	bl	80061b8 <_free_r>
 8006972:	e7e9      	b.n	8006948 <_realloc_r+0x1c>
 8006974:	4635      	mov	r5, r6
 8006976:	e7e7      	b.n	8006948 <_realloc_r+0x1c>

08006978 <_malloc_usable_size_r>:
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f18      	subs	r0, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfbc      	itt	lt
 8006982:	580b      	ldrlt	r3, [r1, r0]
 8006984:	18c0      	addlt	r0, r0, r3
 8006986:	4770      	bx	lr

08006988 <_init>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	bf00      	nop
 800698c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698e:	bc08      	pop	{r3}
 8006990:	469e      	mov	lr, r3
 8006992:	4770      	bx	lr

08006994 <_fini>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr
